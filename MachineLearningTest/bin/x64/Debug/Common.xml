<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:Common.Attributes.I18NAttribute">
            <summary>
            Use this attribute to specify translation on members and/or any code element.
            </summary>
        </member>
        <member name="T:Common.Attributes.TranslationAttribute">
            <summary>
            Use this attribute to specify translation on members and/or any code element.
            </summary>
        </member>
        <member name="F:Common.Contract.TargetPlatform.All">
            <summary>
            Application info which apply to all platforms
            </summary>
        </member>
        <member name="T:Common.Contract.AppInfo">
            <summary>
            Information about the current version of each application and where the package can be downloaded from
            </summary>
        </member>
        <member name="P:Common.Contract.AppInfo.AppType">
            <summary>
            Type of the application this informations are about
            </summary>
        </member>
        <member name="P:Common.Contract.AppInfo.TargetPlatfom">
            <summary>
            Target platform of the application
            </summary>
        </member>
        <member name="P:Common.Contract.AppInfo.MinBuildVersion">
            <summary>
            Holds a version number X.Y.Z (X = Major, Y = Minor, Z= Patch) that defines the smaller version number that is still
            compliant to the current Server API and Database schema.
            This is used for Mobile auto-update. (will prevent starting current app)
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Common.Contract.AppInfo.CurrentBuildVersion" -->
        <member name="P:Common.Contract.AppInfo.PackageDownloadDomain">
            <summary>
            The domain the package will be downloaded from. If null use the domain of the serveur this is querried from
            </summary>
        </member>
        <member name="P:Common.Contract.AppInfo.PackageRelPath">
            <summary>
            Relative path to the package of the application to be installed (for app which download package from server) and self update
            </summary>
        </member>
        <member name="T:Common.Contract.BarCode">
            <summary>
            Defines a bar code.
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.Code">
            <summary>
            Holds the BarCode Number / string (EAN 13)
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.SupplierID">
            <summary>
            Supplier identification number
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.ProductID">
            <summary>
            Product identification number
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.Product">
            <summary>
            Linked Product.
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.Shop">
            <summary>
            Linked Shop
            </summary>
        </member>
        <member name="P:Common.Contract.BarCode.Supplier">
            <summary>
            Linked Supplier
            </summary>
        </member>
        <member name="T:Common.Contract.BeerControlMaster">
            <summary>
            Device used to control beer dispenser devices (Start and Stop mainly).
            </summary>
        </member>
        <member name="T:Common.Contract.BeerDebitMaster">
            <summary>
            Device used to measure dispensed beer volume.
            </summary>
        </member>
        <member name="T:Common.Contract.BeerDispenserTable">
            <summary>
            Special SmartTable that is linked to a beer dispenser mechanism.
            </summary>
        </member>
        <member name="P:Common.Contract.BeerDispenserTable.ProductID">
            <summary>
            Served beer
            </summary>
        </member>
        <member name="T:Common.Contract.CardManager">
            <summary>
            A Card Manager is a tablet used to Create, update, read, delete NFC cards associated to user accounts.
            </summary>
        </member>
        <member name="T:Common.Contract.AudioMediaType">
            <summary>
            See https://www.w3schools.com/html/html5_audio.asp
            </summary>
        </member>
        <member name="P:Common.Contract.BlindTestQuestion.NbSkippedSeconds">
            <summary>
            Null means zero.
            </summary>
        </member>
        <member name="T:Common.Contract.MealType">
            <summary>
            Meal types (breakfast, lunch and dinner)
            </summary>
        </member>
        <member name="P:Common.Contract.Booking.PeopleArrived">
            <summary>
            Set to true when people have already arrived to the restaurant.
            </summary>
        </member>
        <member name="P:Common.Contract.Booking.Comment">
            <summary>
            Optional comment: "near the pool" etc.
            </summary>
        </member>
        <member name="T:Common.Contract.CashRegisterGroup">
            <summary>
            Group of Cash Registers working together (basicaly linked to the same Profit Center).
            </summary>
        </member>
        <member name="T:Common.Contract.CashRegisterWorkAreaLocation">
            <summary>
            Links a Cash REgister to a certain WorkArea.
            Not used yet.
            </summary>
        </member>
        <member name="P:Common.Contract.ChatSession.ConnectionGuid">
            <summary>
            Used internally to uniquely identify this person connection.
            </summary>
        </member>
        <member name="P:Common.Contract.ChatSession.SignalRConnectionId">
            <summary>
            Id of the connection as given by SignalR.
            </summary>
        </member>
        <member name="P:Common.Contract.ChatSession.CreationDateTime">
            <summary>
            CAUTION THIS TIME STAMP IS USED AS CHAT GROUP IDENTIFIER
            This means all the users having an identic ChatSession.CreationDateTime
            are talking together.
            </summary>
        </member>
        <member name="T:Common.Contract.Allergen">
            <summary>
            User Allergen. Can be used to filter catalog content depending on allergens defined in user profile.
            Allergens can be linked to either Products or to ingredients that are then linked to Products.
            </summary>
        </member>
        <member name="P:Common.Contract.Allergen.ID">
            <summary>
            Auto-generated Identification number.
            </summary>
        </member>
        <member name="P:Common.Contract.Allergen.Translations">
            <summary>
            Localized Names
            </summary>
        </member>
        <member name="P:Common.Contract.Allergen.Icon">
            <summary>
            URL to image
            </summary>
        </member>
        <member name="P:Common.Contract.Allergen.ShopID">
            <summary>
            Shop ID
            </summary>
        </member>
        <member name="P:Common.Contract.Allergen.Shop">
            <summary>
            Shop instance
            </summary>
        </member>
        <member name="P:Common.Contract.Allergen.Name">
            <summary>
            Internal Name
            </summary>
        </member>
        <member name="P:Common.Contract.Address.Number">
            <summary>
            Since a Road number can also be like "2 Bis", keep it as string
            </summary>
        </member>
        <member name="T:Common.Contract.ChatMessageMeaning">
            <summary>
            Selection mode for attribute
            </summary>
        </member>
        <member name="F:Common.Contract.ChatMessageMeaning.Unknown">
            <summary>
            No particular meaning
            </summary>
        </member>
        <member name="F:Common.Contract.ChatMessageMeaning.AskForPrivateChat">
            <summary>
            Asks to start private chat
            </summary>
        </member>
        <member name="F:Common.Contract.ChatMessageMeaning.Yes">
            <summary>
            Yes / Accept
            </summary>
        </member>
        <member name="F:Common.Contract.ChatMessageMeaning.No">
            <summary>
            No / Refuse
            </summary>
        </member>
        <member name="T:Common.Contract.ChatMessage">
            <summary>
            Predefined Chat Message
            </summary>
        </member>
        <member name="P:Common.Contract.MapBookableTable.MaxNbBookableTablesForLunch">
            <summary>
            Maximum number of tables that can be booked at lunch time.
            </summary>
        </member>
        <member name="P:Common.Contract.MapBookableTable.MaxNbBookableTablesForDinner">
            <summary>
            Maximum number of tables that can be booked at dinner time.
            </summary>
        </member>
        <member name="T:Common.Contract.Order.OrderDetailItem">
            <summary>
            Wrapper aroun order line to be able to reference one of the following:
            -OrderDetail
            -OrderDetailIngredient
            -OrderDetailAttribute
            </summary>
        </member>
        <member name="T:Common.Contract.PartialChangeTracker`1">
            <summary>
            Enable tracking which properties have been actually set on a product in order to be able to know
            which property have been set by the call to wcf and only perform partial change on these properties
            Object wanting to use this class should initialize it using 
            [OnDeserializing()]
            internal void OnDeserializingMethod(StreamingContext context)
            {
                Tracker = new PartialChangeTracker&lt;T&gt;(this);
            }
            
            !! DO NOT USE ON VIRTUAL PROPERTY OF COMMON NAMESPACE !!
            
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Common.Contract.PartialChangeTracker`1.ListPropertyWhichHaveBeenSet">
            <summary>
            Used to track properties which were actually sent as part of the wcf call
            </summary>
        </member>
        <member name="M:Common.Contract.PartialChangeTracker`1.HasBeenSet(System.String)">
            <summary>
            Return true if the property with the specified name has been set during deserialisation
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Common.Contract.PartialChangeTracker`1.CopyChangeTo(`0,System.Func{System.Reflection.PropertyInfo,System.Object,System.Object,System.Boolean})">
            <summary>
            Copy all propertis which have been changed from the object beeing tracked to the specified destination.
            </summary>
            <param name="destination"></param>
            <param name="doCopy">Callback called for each property which are going to be set in destination.
             parameter of the call back: info property which have changed,oldValue,newValue => if return true will do the copy  </param>
        </member>
        <member name="M:Common.Contract.PartialChangeTracker`1.#ctor(`0)">
            <summary>
            
            </summary>
            <param name="objectToTrack">the object we will track change of property</param>
        </member>
        <member name="P:Common.Contract.ReportingConfig.ReportingConfigType">
            <summary>
            Type of reporting configuration
            </summary>
        </member>
        <member name="P:Common.Contract.ReportingConfig.RowId">
            <summary>
            Showed to the User. If empty, a random one is generated in each CouponPerson Code field
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.Name">
            <summary>
            Internal Name
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.Code">
            <summary>
            Showed to the User. If empty, a random one is generated in each CouponPerson Code field
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.CurrentNumber">
            <summary>
            Holds the number of coupons already provided to users.
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.MaximumNumber">
            <summary>
            Maximum number of coupons to create.
            When set to 0 or null, it means infinite.
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.DiscountAmount">
            <summary>
            The discount is applied on the ProductGroup if any, else on the Product (if any too), else on the Order.
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.DiscountPercentage">
            <summary>
            The discount is applied on the ProductGroup if any, else on the Product (if any too), else on the Order.
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.ExternalGift">
            <summary>
            Name of the external gift when no product or productGroup are linked to the discount.
            Discounts must be null.
            </summary>
        </member>
        <member name="P:Common.Contract.Coupon.CouponProductGroups">
            <summary>
            This property is valid only whn the coupon is for a OrderHeader.
            When true, only the owner can have his own order details affected by this coupon.
            When false, the whole OrderHeader is affected by the discount (including OrderDetails of other users on the table).
            </summary>
        </member>
        <member name="P:Common.Contract.CouponPerson.Code">
            <summary>
            Showed to the User
            </summary>
        </member>
        <member name="P:Common.Contract.CouponPerson.CreatedOn">
            <summary>
            Date of creation
            </summary>
        </member>
        <member name="P:Common.Contract.CouponPerson.UsedOn">
            <summary>
            Date of use. If null, this coupon is not used yet.
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.CashRegisterID">
            <summary>
            Destination Cash Register ID
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.EventType">
            <summary>
            One of these:
            CashRegister:
             - AskForHelpEvent
             - ClearHelpEvent
             - PaymentEvent
             /*- OrderHeaderChangedEvent*/
             - OrderStatusChangedEvent
             - StockChangedEvent (to be ignored - deprecated)
             - TableStatusChangedEvent
            
            SmartTable/Tablet
             - ForcedLogoutEvent 
             - AssociationToUserEvent
             - LockedEvent
             - GameMessageEvent
             - LogRequestEvent
             - MonitoringEvent
             - PaymentEvent
             - OrderHeaderChangedEvent
             - OrderStatusChangedEvent
             - QuizShopDisplayAnswerEvent
             - QuizShopFinalGameEvent
             - QuizShopParticipateEvent
             - QuizShopQuestionEvent
             - QuizShopTableParticipateEvent
             - StockChangedEvent
             - SuggestReOrderEvent (deprecated)
             - TableMessageEvent
             - PersonChangedEvent
             - StockChangedEvent
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.Read">
            <summary>
            False by default.
            Set it to true when read.
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.ExternalID">
            <summary>
            External id of the "main" object related to this notification (user external id for user change notification for exemple)
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.HelpType">
            <summary>
            AskForHelpEvent
            ClearHelpEvent
            FreeText
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.HelpMessage">
            <summary>
            In case the messa
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.DeviceId">
            <summary>
            Used by:
             - PaymentEvent: Used only by Cash Registers 
             - AskForHelpEvent
             - ClearHelpEvent
             - TableStatusChangedEvent
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.OrderHeaderId">
            <summary>
            Used only by Cash Registers 
            OrderStatusChangedEvent
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.OrderHeaderStateId">
            <summary>
            Holds the new StateID value.
            This is useful to know if an order is now closed.
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.PaymentReceiptId">
            <summary>
            The id of the receipt for the payment which has been made
            Only set when PaymentStatus is Success
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.UserId">
            <summary>
            User identification number
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.Deleted">
            <summary>
            Set to true if user has been deleted (or anonymize).
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.OnlyBalanceUpdated">
            <summary>
            Set to true if only user balance has been updated.
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.ChangeType">
            <summary>
             The type of change which have been applied to the user
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.Balance">
            <summary>
            User balance (avoir)
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.ProductId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.QuantityChange">
            <summary>
            The quantity change which has been made
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.SerializedObject">
            <summary>
            PaymentEvent: OrderPayment
            OrderStatusChangedEvent: OrderHeader
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.Day">
            <summary>
            This field is used by Phare Software to store to which day number the notification is related to.
            This is linked to opening and closing a day and the possibility to revert a closing in case of error.
            </summary>
        </member>
        <member name="P:Common.Contract.DatabaseNotification.NbDiners">
            <summary>
            Used with TableStatusChanged event to provide (new/updated/existing) Nb diners.
            </summary>
        </member>
        <member name="F:Common.Contract.GameStatus.NotStarted">
            <summary>
            Request has been sent. Response is still pending.
            </summary>
        </member>
        <member name="F:Common.Contract.GameStatus.ShowingResults">
            <summary>
            Game as such is finished, but still showing results to participants.
            </summary>
        </member>
        <member name="F:Common.Contract.GameStatus.Over">
            <summary>
            Finished
            </summary>
        </member>
        <member name="P:Common.Contract.GameState.CurrentStep">
            <summary>
            For the Shop Quiz game, this corresponds to the question index (or number).
            </summary>
        </member>
        <member name="P:Common.Contract.GameState.NbSteps">
            <summary>
            Number of available steps.
            </summary>
        </member>
        <member name="F:Common.Contract.GameTeamInvitationState.InProgress">
            <summary>
            Request has been sent. Response is still pending.
            </summary>
        </member>
        <member name="P:Common.Contract.GameTeam.CurrentStep">
            <summary>
            Holds the last step number that this team has finished with (could be answered to a question).
            </summary>
        </member>
        <member name="T:Common.Contract.HappeningPerson">
            <summary>
            This class is used to store the persons that will take part of a Happening (event as such).
            </summary>
        </member>
        <member name="T:Common.Contract.Happening">
            <summary>
            This class is used to define a Happening (event as such).
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.Login">
            <summary>
            Triggered each time the user identifies itself
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.ValidateOrder">
            <summary>
            Triggered each time the user's basket is validated
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.ProfileUpdated">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.GameWon">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.Scheduled">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.MobileLogin">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.Sponsoring">
            <summary>
            Triggered when an user sponsors someone else
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.QuestionnaireFilledIn">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.CouponReceive">
            <summary>
            Event sent when the user receive a coupon, Parameter will be the id of the coupon that the user received
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.NewHighScore">
            <summary>
            Event raised when a user beat an high score
            </summary>
        </member>
        <member name="F:Common.Contract.EventType.UpdateHighScore">
            <summary>
            Event raised when the user update his own high score
            </summary>
        </member>
        <member name="T:Common.Contract.FeatureFonction">
            <summary>
            Possible type for a feature
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_LOGOUT">
            <summary>
            SmartTable: Show  logout icon (not used anymore)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_SHOW_HOME">
            <summary>
            SmartTable: show Home Guided Activity
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_CASH_REG_PRINT_MODE">
            <summary>
            CashRegister: activate production tickets printing.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_CASH_REG_PRINT_PROD_W_INTERMEDIATE_NODES">
            <summary>
            CashRegister: print production tickets showing all OrderDetail nodes.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_CONNECT_FACEBOOK">
            <summary>
            SmartTable: allow user authentication by facebook?
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_CATALOG">
            <summary>
            SmartTable: Show catalog? 
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_AUTHENTICATION">
            <summary>
            SmartTable: Show authentication page?
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.CAN_ORDERED">
            <summary>
            Is ordering process activated?
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.USE_PAYMENT">
            <summary>
            Use payment module on SmartTable orTablet
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.USE_PAYMENT_CASHREGISTER">
            <summary>
            Use payment tab on Cash register.
            If not the "Payment Ok" button appears to close the OrderHeader.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.REGROUP_SAME_PRODUCTS_ON_PRINTING_CASHREGISTER">
            <summary>
            When True, OrderDetails with same products are regrouped before printing, and quantity is increased accordingly.
            False by default.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.PROD_RECEIPT_TITLE_FONT_SIZE_CASHREGISTER">
            <summary>
            Font size for title on production receipts
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.PROD_RECEIPT_SUBTITLE_FONT_SIZE_CASHREGISTER">
            <summary>
            Font size for subtitle on production receipts
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.PROD_RECEIPT_NORMAL_FONT_SIZE_CASHREGISTER">
            <summary>
            Font size for Normal text on production receipts
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_MOBILE_CASHREGISTER">
            <summary>
            Cash REgister: show mobile orders.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_ALLERGEN">
            <summary>
            SmartTable: show allergens in catalog
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.TAKE_AWAY">
            <summary>
            Activate Take Away ordering mode
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_ORDER_CASHREGISTER">
            <summary>
            Cash Register: show orders
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_HISTORY_CASHREGISTER">
            <summary>
            CashRegister: Show history tab
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_BOOKING">
            <summary>
            Cash Register: allow table booking
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.PRINT_PRODUCTION_RECEIPTS">
            <summary>
            Cash Register: print production tickets
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.BEER_DISPENSER">
            <summary>
            When set to True, activates the beer dispenser daemon that is taking care 
            of the communication with the beer dispenser devices.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.TAKE_AWAY_CASHREGISTER">
            <summary>
            Cash REgister: display take away orders.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.USE_COUPONS">
            <summary>
            Used to display coupon fields in user basket on SmartTable.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.USER_AUTH_VIA_SMS_LINK">
            <summary>
            Authenticate end users and associate the frontend device (SmartTable) via a link sent via SMS toward the Back Office.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.PREPAYMENT_ONLY">
            <summary>
            Customer can only buy products through pre-payments, meaning using user balance.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.LOGIN_REQUIRED_TO_ACCESS_MENU">
            <summary>
            To be able to access the menu the user need to be logged in
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.LOGIN_USING_NFC">
            <summary>
            Activate ability to login using an NFC card
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.LOGIN_MANUAL">
            <summary>
            Activate login using email or phone
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.LOGIN_EXISTING_USER_USING_BUTTON">
            <summary>
            Enable login for existing users without having to authenticate
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_COMSUMPTION_SCREEN">
            <summary>
            Show screen agreating consumptions of all users of the table when nobodyis logged in
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.TABLET_LINKED_TOSMART_TABLE">
            <summary>
            True if the tablet is always linked to the same table (will ask for the table on first startup and then will keep it forever)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SIMULATE_BEER_DEBIT_MASTER">
            <summary>
            When true, asks to simulate the Beer Debit Master.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SIMULATE_BEER_CONTROL_MASTER">
            <summary>
            When true, asks the system to simulate the Beer Control Master.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.CLOSE_TABLE_ON_USER_DISCONNECTION">
            <summary>
            When true automatically close the table when the user disconnects (if using a loyalty card, when the card is removed from the reader)
            False : don't disconect
            True: close table every time user disconect
            x : number indication the number of order after which the table will be closed on user disconection
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SUPPORTED_DEVICE_ORIENTATIONS">
            <summary>
            Specify which orientation are supported by the tablet
            </summary>
            
        </member>
        <member name="F:Common.Contract.FeatureFonction.SEND_ORDER_IMEDIATELY">
            <summary>
            If true, send all order imediately instead of waiting for all tablet to have ordered to send it
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.USE_MACHINE_LEARNING_PREDICTIONS">
            <summary>
            Should we rely on Machine learning product prediction to fill in Guided Activities?
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SEND_EVENTS">
            <summary>
            Shall tablets send events to WCF server to track user behavior?
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.OVERRIDE_XAML">
            <summary>
            Define the list of xaml page that the client should use instead of the default ones
            format:PageType=xamlPageClassNameWithNamespace|...
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.FX_BACKOFFICE">
            <summary>
            Cash Register: Show back office tab
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SKIP_CART_TO_ORDER">
            <summary>
            If true order directly without going to the cart
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.EAT_IN_MOBILE">
            <summary>
            If false disable the otpion to "eat in" from mobile application, for backward compatibility purpose, if not present this value should default to true
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.NFC_IMPLEMENTATION_TYPE">
            <summary>
            Namespace qualified type of the type used to implement nfc 
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.STAYLOGGEDIN_CARD_REMOVED">
            <summary>
            If set to true, user will stay logged in when the card is removed (instead user get logged out when beer ordered or timeout reach with no activity)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.TIMEOUT_START_TAKINGBEEER">
            <summary>
            Amount of time in second we wait before automatically logging out the user if he is not drawing beer (in case if STAYLOGGEDIN_CARD_REMOVED is true)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.TIMEOUT_CREATEORDER_BEEROPEN">
            <summary>
            In case beer tap open: Ellapse time (in second) during which we must not received any beer notification from debitmaster  before we create the order (default 5)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.TIMEOUT_CREATEORDER_BEERCLOSED">
            <summary>
            In case beer tap has already been closed : Ellapse time (in second) during which we must not received any beer notification from debitmaster  before we create the order (default 5)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.DISPLAY_CART_IN_MENU">
            <summary>
            If true will display the cart in the left menu (default true)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SKIP_OPTIONAL_CHOICE">
            <summary>
            If true, skip the optional choice when ordering, these include ingredients and optional guided activity steps (these option can still be reached via the detail screen and the detail button)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.CAN_ADDTOCART">
            <summary>
            Default true, if false user will just be able to visualize the menu but without beeing able to add items to the cart (all the button will be hidden), also only mandatory step will be shown (and not sugestion)
            If true but CAN_ORDER false, mean that items can be added to cart but validate button will not be enabled
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.AUTOGENERATE_COURSE">
            <summary>
            If true will auto assign product created from table to a course in function of there working order
            Otherwise will just assign all product to the same course 
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.PRODUCTLIST_RATIO">
            <summary>
            the ratio of the first column of the product list grid view (2 meaning first column will be 2/3 of the size)
            Default value is 1 (meaning equal size)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.HIDE_ORDER_BUTTON_PRODLIST">
            <summary>
            If true will not display the order button on product items in the product list page
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.SHOW_HOME_LOGO">
            <summary>
            Used to display or not the tablet home screen logo icon.
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.CASH_REGISTER_BASE_URI">
            <summary>
            Base url for the cash register api
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.CASH_REGISTER_ORDER_API">
            <summary>
            Relative url in order to send a order to the cash register 
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.UNLIMITED_USER_BALANCE">
            <summary>
            Used in case the user is paying after the fact, in which case the user balance is not actually used
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.AUTO_CREATE_LOYALTYCARD_USER">
            <summary>
            If true, in case no user is associated with a loyalty card we automatically create one (instead of generating an authentication failure)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.BEER_MANAGER_IMPLEMENTATION">
            <summary>
            Implementation of the BeerDispenserManagerBase class to use (by default is BeerDispenserManager but can also be OldBeerDispenserManager to use version which reopen COM port each time receive/send)
            </summary>
        </member>
        <member name="F:Common.Contract.FeatureFonction.NULL">
            <summary>
            Used by the Back Office for feature edition.
            </summary>
        </member>
        <member name="T:Common.Contract.Kiosk">
            <summary>
            A kiosk is a device that can be used to order and then released immediately.
            </summary>
        </member>
        <member name="P:Common.Contract.Kiosk.Capacity">
            <summary>
            Maximum number of persons. Always 1 for a kiosk device.
            </summary>
        </member>
        <member name="P:Common.Contract.Kiosk.IsInteractive">
            <summary>
            Always true: the kiosk is an interactive, touch-enabled SmartTable.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderHeaderCouponPerson">
            <summary>
            Links an OrderHeader to a CouponPerson.
            </summary>
        </member>
        <member name="T:Common.Contract.PriceListRate">
            <summary>
            Defines different price levels/rates.
            </summary>
        </member>
        <member name="T:Common.Contract.PriceList">
            <summary>
            A PriceList defines the list of Net Prices that can be applied to a Product.
            
            Scheduled and Default PriceLists:
             There is two different schedules which are attached to a price list:
            * For each price rate there is a schedule for when this price rate is applied (day of the week/hour) 
            * For each price list,  a schedule to determine when this price list will start applying (price change programed in the future)
             - When the schedule is over, the default net price is applied (StandardPrice property). This Standard Price comes either from the default PriceList (meaning the one 
               with NO schedule attached), or if it doesn't exist, from the current PriceList (meaning the last one that was scheduled).
            </summary>
        </member>
        <member name="M:Common.Contract.PriceList.CreateFromProduct(Common.Contract.Product)">
            <summary>
            Create a price list from the NetPrice/VATCode contain in the product
            </summary>
            <param name="product"></param>
            <returns></returns>
        </member>
        <member name="P:Common.Contract.PriceList.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.ProductID">
            <summary>
            Linked product id
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.Product">
            <summary>
            Linked Product
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.VATCode">
            <summary>
            VAT ID
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.ProductGroupTypeID">
            <summary>
            Group of product groups
            Will be replaced by profit center.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.ProductGroupType">
            <summary>
            Do not use
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.StandardPrice">
            <summary>
            Default(standard) Net Price.
            
            Scheduled and Default PriceLists:
             - When a pricelist is scheduled, the Price or rate to apply to the linked product is set in the Schedule object (PriceListRate property).
             - When the schedule is over, the default net price is applied (StandardPrice property). This Standard Price comes either from the default PriceList (meaning the one 
               with NO schedule attached), or if it doesn't exist, from the current PriceList (meaning the last one that was scheduled).
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.Rate1">
            <summary>
            Net Price with first level of discount applied.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.Rate2">
            <summary>
            Net Price with second level of discount applied.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.Rate3">
            <summary>
            Net Price with third level of discount applied.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.Rate4">
            <summary>
            Net Price with fourth level of discount applied.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.SpecialOfferPercent">
            <summary>
            This is used during a certain period time (for sales for example).
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.MaximumDiscountPercent">
            <summary>
            Discount percent that cannot be superseded when adding all discounts.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.Available">
            <summary>
            Used when a price list is set on a "child entity" (mobile or other restaurant in a franchise) but not for everybody
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.PriceValidityScheduleID">
            <summary>
            Link to a schedule to defined when a certain price has to be applied.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceList.PriceValiditySchedule">
            <summary>
            Determines the dates between which this price list apply (for future update of price)
            Will be null for the price list which is currently valid
            </summary>
        </member>
        <member name="T:Common.Contract.PriceRateSchedule">
            <summary>
            This is the link to link between the 5-price rate and the schedule for which it applies.
            </summary>
        </member>
        <member name="P:Common.Contract.PriceRateSchedule.ProductGroupTypeID">
            <summary>
            Product Group Type ID
            Will be replaced by ProfitCenters
            </summary>
        </member>
        <member name="P:Common.Contract.PriceRateSchedule.ProductGroupType">
            <summary>
            Will be replaced by ProfitCenters
            </summary>
        </member>
        <member name="P:Common.Contract.PriceRateSchedule.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.PriceRateSchedule.ScheduleID">
            <summary>
            Schedule identification number
            </summary>
        </member>
        <member name="P:Common.Contract.PriceRateSchedule.Schedule">
            <summary>
            Linked Schedule
            </summary>
        </member>
        <member name="P:Common.Contract.PriceRateSchedule.PriceListRate">
            <summary>
            Scheduled and Default PriceLists:
             - When a pricelist is scheduled, the Price or rate to apply to the linked product is set in the PriceListSchedule object (PriceListRate property).
             - When the schedule is over, the default net price is applied (StandardPrice property). This Standard Price comes either from the default PriceList (meaning the one 
               with NO schedule attached), or if it doesn't exist, from the current PriceList (meaning the last one that was scheduled) or by default from the Product.NetPrice property.
            </summary>
        </member>
        <member name="T:Common.Contract.ProductSupplier">
            <summary>
            Link between a Product and a Supplier
            </summary>
        </member>
        <member name="P:Common.Contract.ProductSupplier.NetPrice">
            <summary>
            Buying Net Price
            </summary>
        </member>
        <member name="T:Common.Contract.IOptionalDbEntity">
            <summary>
            Interface for classes which can be set as not available in function the ProfitCenter
            </summary>
        </member>
        <member name="T:Common.Contract.ProfitCenter.Company">
            <summary>
            Entity used to denotes a restaurant
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.Company.IISServerUrl">
            <summary>
            Url of server this company will be running on
            </summary>
        </member>
        <member name="T:Common.Contract.ProfitCenter.CompanyGroup">
            <summary>
            A group of company => the root node entity
            </summary>
        </member>
        <member name="T:Common.Contract.ProfitCenter.Entity">
            <summary>
            Base class for Tree nodes used to manage override at different level
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.Entity.ExternalID">
            <summary>
            ID of external system
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.EntityCatalogProfile.Order">
            <summary>
            Order in which Catalog profiles will be applied
            </summary>
        </member>
        <member name="T:Common.Contract.ProfitCenter.CatalogProfile">
            <summary>
            Profile to be attached to entity which will tied entity with a list of overrides
            </summary>
        </member>
        <member name="T:Common.Contract.ProfitCenter.ProfitCenter">
            <summary>
            Entity inside a company (BAR, SPA,...)
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ProfitCenter.TakeAway">
            <summary>
            True for the profit center which is used for take away orders
            </summary>
        </member>
        <member name="T:Common.Contract.ProfitCenter.ValueOverride">
            <summary>
            Override values in function of the profile
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.CatalogProfileId">
            <summary>
            Id of the profile this override is part of
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.TableName">
            <summary>
            Name of the table for which the override apply
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.TargetItemID">
            <summary>
            Id of the object this override apply to
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.PropertyName">
            <summary>
            Name of the property to override
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.PropertyValue">
            <summary>
            Value of the property to override
            </summary>
        </member>
        <member name="M:Common.Contract.ProfitCenter.ValueOverride.GetPropertyValue(System.Type)">
            <summary>
            Convert PropertyValue to the specified type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.LastModificationDateTime">
            <summary>
            Time this override was created or last modified
            </summary>
        </member>
        <member name="P:Common.Contract.ProfitCenter.ValueOverride.EffectiveDateTime">
            <summary>
            Date time this override will start taking effect
            If null this override is currentlly in effect
            </summary>
        </member>
        <member name="P:Common.Contract.RuleDefinition.ExecutionCount">
            <summary>
            Parameter depend on the choosed behaviour.
            If it's 1 when it have to be executed once (never re-execute).
            If it's 0 if will be always re-executed.
            Re-execution can be only verified while working with Person objects.
            See RuleDefinitionPerson
            </summary>
        </member>
        <member name="P:Common.Contract.RuleSetDefinition.ExecutionCount">
            <summary>
            No impact on the ruleSet execution. Only informative.
            Get a +1 on each execution
            </summary>
        </member>
        <member name="P:Common.Contract.RuleSetDefinition.Event">
            <summary>
            Event that can run this RuleSet
            </summary>
        </member>
        <member name="T:Common.Contract.ScheduleRecurrencePattern">
            <summary>
            See Outlook calendar's meeting definition
            </summary>
        </member>
        <member name="F:Common.Contract.ScheduleRecurrencePattern.None">
            <summary>
            No recurrence.
            </summary>
        </member>
        <member name="F:Common.Contract.ScheduleRecurrencePattern.TimeSpan">
            <summary>
            Fixed delay between each occurence Start time.
            </summary>
        </member>
        <member name="F:Common.Contract.ScheduleRecurrencePattern.Daily">
            <summary>
            Everyday same time as start time.
            </summary>
        </member>
        <member name="F:Common.Contract.ScheduleRecurrencePattern.Weekly">
            <summary>
            Everyday week on specified days.
            </summary>
        </member>
        <member name="T:Common.Contract.ScheduleRangeOfRecurrence">
            <summary>
            See Outlook calendar's meeting definition
            </summary>
        </member>
        <member name="F:Common.Contract.ScheduleRangeOfRecurrence.EndAfter">
            <summary>
            Number of occurences to execute a task
            </summary>
        </member>
        <member name="F:Common.Contract.ScheduleRangeOfRecurrence.EndBy">
            <summary>
            Date of Last Occurence (inclusive)
            </summary>
        </member>
        <member name="T:Common.Contract.Schedule">
            <summary>
            Defines a Schedule.
            All Times are GMT.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.Over">
            <summary>
            When set to true, the schedule is over and does not need to be checked again.
            This field is defined for performance reason.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.RunImmediately">
            <summary>
            Wen true, the TaskScheduler executes this task immediately.
            Then it sets the Start field to current date and time and changes
            the RunImediately flag to false. Recurrences and end definition are then based on this start date.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.Start">
            <summary>
            Date AND time of first occurence
            All Times are GMT.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.End">
            <summary>
            Date AND time of end of first occurence
            This allows to define the duration of a single occurence.
            All Times are GMT.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.Delay">
            <summary>
            Used when RecurrencePattern equals TimeSpan.
            Defines the Delay between each Task Start time.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.RangeOfRecurrence">
            <summary>
            Specifies how the task recurrence finishes.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.EndAfter">
            <summary>
            Defines the number of occurences.
            Used when TaskRangeOfRecurrence equals EndAfter.
            </summary>
        </member>
        <member name="P:Common.Contract.Schedule.EndBy">
            <summary>
            Defines the Last date (not time) until when the task can be executed.
            Used when TaskRangeOfRecurrence equals EndBy.
            </summary>
        </member>
        <member name="T:Common.Contract.TaskDefinition">
            <summary>
            Defines a Task.
            All Times are GMT.
            </summary>
        </member>
        <member name="P:Common.Contract.TaskDefinition.ClassFullName">
            <summary>
            Namespace and name of the class implementing the ITask interface.
            </summary>
        </member>
        <member name="T:Common.Contract.TaskExecutionStatus">
            <summary>
            See Outlook calendar's meeting definition
            </summary>
        </member>
        <member name="F:Common.Contract.TaskExecutionStatus.NotStarted">
            <summary>
            Initializing
            </summary>
        </member>
        <member name="F:Common.Contract.TaskExecutionStatus.Running">
            <summary>
            Processing handed over to task implementation.
            </summary>
        </member>
        <member name="F:Common.Contract.TaskExecutionStatus.Success">
            <summary>
            Execution Successful
            </summary>
        </member>
        <member name="F:Common.Contract.TaskExecutionStatus.Error">
            <summary>
            An error occured
            </summary>
        </member>
        <member name="T:Common.Contract.TaskExecution">
            <summary>
            Holds the result of executed Task.
            See TaskDefinition and TaskScheduler classes for further details.
            </summary>
        </member>
        <member name="P:Common.Contract.TaskExecution.TaskDefinitionID">
            <summary>
            Link toward the corresponding Task Definition.
            </summary>
        </member>
        <member name="P:Common.Contract.TaskExecution.Start">
            <summary>
            Time when the TaskScheduler started the Task Execution (GMT).
            </summary>
        </member>
        <member name="P:Common.Contract.TaskExecution.ReturnCode">
            <summary>
            0 means ok.
            </summary>
        </member>
        <member name="T:Common.Contract.TextTemplateMedia">
            <summary>
            Defines the text template media
            </summary>
        </member>
        <member name="F:Common.Contract.TextTemplateMedia.CuddlupNotification">
            <summary>
            Json with the target device id and NotifEvent to sent to
            </summary>
        </member>
        <member name="T:Common.Contract.TextTemplate">
            <summary>
            Defins a formatted text to be used for SMS, Email or other media.
            </summary>
        </member>
        <member name="P:Common.Contract.TextTemplate.Title">
            <summary>
            The title for this TextTemplate. This field is the "Subject" for an e-mail media.
            </summary>
        </member>
        <member name="P:Common.Contract.TextTemplate.HtmlText">
            <summary>
            HTML Text. Primary source for emails.
            </summary>
        </member>
        <member name="P:Common.Contract.TextTemplate.RawText">
            <summary>
            Unformatted text. Used by SMS for example.
            </summary>
        </member>
        <member name="P:Common.Contract.TextTemplate.PlaceHolders">
            <summary>
            all placeholders for this TextTemplate. If the Field property beggins with "=" character, it's a property value from the context.
            </summary>
        </member>
        <member name="P:Common.Contract.TextTemplatePlaceholder.Field">
            <summary>
            Holds the Field value for this placeholder.
            Can be a name for a placeholder or its corresponding Class and Property.
            </summary>
        </member>
        <member name="T:Common.Contract.Tv">
            <summary>
            Casts content to the room via associated channel and its screens
            </summary>
        </member>
        <member name="P:Common.Contract.Tv.TvChannelID">
            <summary>
            Channel Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Tv.TvChannel">
            <summary>
            Linked Channel
            </summary>
        </member>
        <member name="P:Common.Contract.Tv.TvHappening">
            <summary>
            Happening (event) that may be linked to this special broadcast (like for a game for example)
            </summary>
        </member>
        <member name="T:Common.Contract.TvAdScreen">
            <summary>
            To display a image with a title
            </summary>
        </member>
        <member name="P:Common.Contract.TvChannelScreen.Position">
            <summary>
            Brings position relative to sibling screens in a channel
            </summary>
        </member>
        <member name="T:Common.Contract.TvImageScreen">
            <summary>
            To display an image full screen
            </summary>
        </member>
        <member name="P:Common.Contract.TvScreen.Duration">
            <summary>
            Show duration in seconds.
            </summary>
        </member>
        <member name="P:Common.Contract.TvSocialNetworkScreen.InfoType">
            <summary>
            Hold type of information retrieved from third-party provider.
            Examples:
             - UserPost
             - OwnerPost
             - Review
             - Overview (general view of account page)
             - Event
             - #(hashtag) (hashtag to follow)
             
             String can contain several values separated by a pipe character '|'
            </summary>
        </member>
        <member name="P:Common.Contract.TvVideoScreen.Video">
            <summary>
            Video URL
            </summary>
        </member>
        <member name="P:Common.Contract.TvWebScreen.Url">
            <summary>
            Web Page URL
            </summary>
        </member>
        <member name="T:Common.Contract.UpdateHistory">
            <summary>
            Used to store changes of database tables.
            This is at least, used to manage frontend data caches.
            </summary>
        </member>
        <member name="P:Common.Contract.UpdateHistory.LastEditionDatetime">
            <summary>
            UTC
            </summary>
        </member>
        <member name="P:Common.Contract.LostDevice.Timestamp">
            <summary>
            UTC timezone
            </summary>
        </member>
        <member name="P:Common.Contract.LostDevice.Picture">
            <summary>
            Optional picture
            @See http://stackoverflow.com/a/25400976/6190527
            </summary>
        </member>
        <member name="T:Common.Contract.ProductValidity">
            <summary>
            Days and times when the linked products can be sold.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.ProductID">
            <summary>
            Product Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.ValidityDate">
            <summary>
            Week day or group of week days.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.StartTime">
            <summary>
            Start time during the day
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.EndTime">
            <summary>
            End time during the day.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.ValidFrom">
            <summary>
            Optional start date
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.ValidTo">
            <summary>
            Optional end date.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductValidity.Product">
            <summary>
            Linked Product
            </summary>
        </member>
        <member name="T:Common.Contract.ProductWorkArea">
            <summary>
            Links a Product to its Workareas. There can be several workareas for a single product.
            A work area is a place of production (Kitchen, bar, etc.).
            </summary>
        </member>
        <member name="P:Common.Contract.ProductWorkArea.ProductId">
            <summary>
            Used to identify Product
            </summary> 
        </member>
        <member name="P:Common.Contract.ProductWorkArea.WorkAreaId">
            <summary>
            Used to identify WorkArea
            </summary> 
        </member>
        <member name="P:Common.Contract.ProductWorkArea.WorkArea">
            <summary>
            Linked WorkArea instance.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductWorkArea.Product">
            <summary>
            Linked Product instance.
            </summary>
        </member>
        <member name="T:Common.Contract.QuestionProductGroup">
            <summary>
            This is to link product groups to feedback questions.
            </summary>
        </member>
        <member name="T:Common.Contract.CourtesyVisit">
            <summary>
            Represent a set of questions asked after the main dished has been served.
            This is to get feedbacks from the end users of their overall experience.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderPaymentPendingDetail">
            <summary>
            Same as ORederPaymentDetail, but for OrderPaymentPending class.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderPaymentPending">
            <summary>
            Payment is pending meaning, being processed by end user.
            So it is not yet validated.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPaymentPending.NetPrice">
            <summary>
            CAUTION: the NetPrice does NOT take the Tip amount into account.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPaymentPending.Tip">
            <summary>
            Optional Tip for a payment
            CAUTION: the NetPrice above does NOT take the Tip amount into account.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPaymentPending.NbPartInSplit">
            <summary>
            In case it's a payment corresponding to a split on the total, the nb of parts it has been splitted in
            (otherwise 0 if this is a partial payment)
            </summary>
        </member>
        <member name="T:Common.Contract.OrderReceipt">
            <summary>
            A receipt grouping several payments for a single OrderHeader.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderReceipt.OrderHeaderID">
            <summary>
            If not null => order payment
            else => payment for an user to credit is account 
            </summary>
        </member>
        <member name="P:Common.Contract.OrderReceipt.OriginalOrderHeaderID">
            <summary>
            Used to identify the mobile OrderHeader that was initially linked to this OrderPayment instance.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderReceipt.OrderPayments">
            <summary>
            Used to identify the mobile OrderHeader that was initially linked to this OrderPayment instance.
            </summary>
        </member>
        <member name="P:Common.Contract.PersonHighScore.HighScore">
            <summary>
            HighScore for this game
            </summary>
        </member>
        <member name="P:Common.Contract.PersonHighScore.CreationDatetime">
            <summary>
            Date when this highscore has been performed
            </summary>
        </member>
        <member name="T:Common.Contract.GuidedActivityProductGroup">
            <summary>
            Represents an ordered step in a Guided Activity
            
            Product (P) -> Guided Activiyt (GA) -> Guided Activity Product Group (GAPG) -> Product Group (PG) -> Product Product Group (PPG) -> Product (P) -> Attribute / Ingredient
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.GuidedActivityID">
            <summary>
            Id of linked guided activity
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.ProductGroupID">
            <summary>
            Id of linked product group.
            When null, the step is automatically provided with products selected by machine learning.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.ChoiceMandatory">
            <summary>
            When mandatory, user must make a choice.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.Index">
            <summary>
            Index is used to sort the Guided Activity pages.
            It starts at 1 and increments until all pages are defined.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.Type">
            <summary>
            GA type. See enumeration for further details.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.ProductGroup">
            <summary>
            Linked product group
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.GuidedActivity">
            <summary>
            Linked Guided Activity
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.Translations">
            <summary>
            Localized name of this GAPG
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivityProductGroup.Included">
            <summary>
            when true the product is included into (defined as child) the GA initial product
            null value means false. This does NOT have any incidence of additional price.
            </summary>
        </member>
        <member name="T:Common.Contract.GuidedActivityType">
            <summary>
            Possible types for Guided Activities.
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.ProductGA">
            <summary>
            Guided Activity linked to a product that is not a menu
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.SMD">
            <summary>
            Starter main-dishes dessert
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.SMDB">
            <summary>
            Starter main-dishes dessert beverage
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.SM">
            <summary>
            Starter main-dishes
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.MD">
            <summary>
            Main-dishes dessert
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.SMB">
            <summary>
            Starter main-dishes beverage
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.MDB">
            <summary>
            Main-dishes dessert beverage
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.COURTESYVISIT">
            <summary>
            Courtesy visit type
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.MB">
            <summary>
            Main-dishes beverage
            </summary>
        </member>
        <member name="F:Common.Contract.GuidedActivityType.CUSTOMMENU">
            <summary>
            Menu with suggestions
            </summary>
        </member>
        <member name="T:Common.Contract.GuidedActivity">
            <summary>
            A guided activity contains an ordered list of pages. 
            Each page shows a list of options that could be
            - Attributes and ingredients: automatically upon association to a selected product
            - Products: defined here in ProductGroups linked to GuidedActivityProductGroups of Guided Activity.
            
            Product (P) -> Guided Activiyt (GA) -> Guided Activity Product Group (GAPG) -> Product Group (PG) -> Product Product Group (PPG) -> Product (P) -> Attribute / Ingredient
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.ExternalID">
            <summary>
            Optional id in a third-party system.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.Name">
            <summary>
            Internal name
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.Type">
            <summary>
            Type of activity. Could either be linked to a product or a menu definition.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.StartHome">
            <summary>
            When true, The Guided Activity is run at the SmartTable startup. This is for example to push the today's special meal or drinks.
            Defaults to false.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.Insertable">
            <summary>
            When true, means this Guided Activity can be inserted into another Guided Activity
            When false, it is not possible to insert this Guided Acitivity into a parent Guided Acitivity.
            This is to avoid to duplicate products to avoid having their linked GA inserted in main GA.
            
            When set to null it is considered as true.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.Shop">
            <summary>
            Linked shop
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.NbSteps">
            <summary>
            Number of steps.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.GuidedActivityProductGroups">
            <summary>
            List of guided activity product groups.
            </summary>
        </member>
        <member name="P:Common.Contract.GuidedActivity.Translations">
            <summary>
            Localized names.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Common.Contract.Ingredient" -->
        <member name="P:Common.Contract.Ingredient.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.Name">
            <summary>
            Internal name
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.Icon">
            <summary>
            URL to image
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.GrossPrice">
            <summary>
            Gross price (not used so far)
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.ShopID">
            <summary>
            Linked shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.Shop">
            <summary>
            Linked Shop
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.VATCode">
            <summary>
            VAT ID
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.Vat">
            <summary>
            Linked VAT
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.MarginPercentage">
            <summary>
            Margin percent (Not used)
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.MarginPrice">
            <summary>
            Margin amount (not used)
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.NetPrice">
            <summary>
            This is an additional price for this ingredient.
            CAUTION: note that this price here is not displayed in the menu descriptions!
            CAUTION 2: when this ingredient is selected by the user, this price comes in addition
            to the one defined in the ProductproductGroup class (when in a Guided Activity).
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.DiscountPercentage">
            <summary>
            Discount percent (not used)
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.DiscountedPrice">
            <summary>
            Discount amount (not used)
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.ProductIngredients">
            <summary>
            Links to products
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.Translations">
            <summary>
            Localized name
            </summary>
        </member>
        <member name="P:Common.Contract.Ingredient.IngredientAllergens">
            <summary>
            Linked to allergens
            </summary>
        </member>
        <member name="F:Common.Contract.QuestionType.Note">
            <summary>
            Grade
            </summary>
        </member>
        <member name="T:Common.Contract.Question">
            <summary>
            Question asked to customers to get feedbacks of service and products.
            </summary>
        </member>
        <member name="T:Common.Contract.TakeAway">
            <summary>
            Virtual device used to attach to a take away order.
            It brings additional inforamtion to the optional linked sale partner.
            </summary>
        </member>
        <member name="P:Common.Contract.TakeAway.Partner">
            <summary>
            Optional sale partner (Deliveroo, Foodora, etc.).
            </summary>
        </member>
        <member name="T:Common.Contract.ProductGroupType">
            <summary>
            Used to group and classify ProductGroups.
            Corresponds to a Profit Center. This paradigm will be abandonned in favor of both the ProfitCenters and Entities paradigms.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.Name">
            <summary>
            Internal name
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.IsDefault">
            <summary>
            Default ProductGroupType is shown in the catalog
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.Icon">
            <summary>
            URL to image
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.Email">
            <summary>
            Orders for this Product Group Type can be sent to the email below in text form.
            But they can also be sent to a CashRegisterGroup
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.CashRegisterGroupID">
            <summary>
            Orders for this Product Group Type can be sent to the email in text form.
            But they can also be sent to a CashRegisterGroup.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.ExternalID">
            <summary>
            In case we are linked to an external system (like a cash register),
            this column allows storage of external system Id for the corresponding entity in this third-party system.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.Translations">
            <summary>
            Localized names.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroupType.Shop">
            <summary>
            Linked shop instance
            </summary>
        </member>
        <member name="P:Common.Contract.MapItem.Rotation">
            <summary>
            ClockWise in celsius degrees.
            Means 90 degrees goes downward,
            -90 degrees goes upward.
            </summary>
        </member>
        <member name="P:Common.Contract.MapItem.Color">
            <summary>
            Either #RRGGBB (hexadecimal notation)
            Or URL toward a background tile
            </summary>
        </member>
        <member name="P:Common.Contract.MapItem.LookAndFeelID">
            <summary>
            Link toward the Icon for this item
            </summary>
        </member>
        <member name="P:Common.Contract.MapItem.IsBackground">
            <summary>
            When true, use it as background for other map items.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderDetailAttribute">
            <summary>
            Links an OrderDEtail to an attribute.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetailAttribute.CourseIndex">
            <summary>
            The index of the course this order is part of
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetailAttribute.OrderIndex">
            <summary>
            Index this order among all order detail of the order header
            </summary>
        </member>
        <member name="T:Common.Contract.AttributeValue">
            <summary>
            Defines a selectable value for an attribute.
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.ExternalID">
            <summary>
            Optional id for a third-party system.
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.Icon">
            <summary>
            URL to image
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.Name">
            <summary>
            Internal name not showed to end user.
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.GrossPrice">
            <summary>
            Gross Price - prix brut
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.MarginPercentage">
            <summary>
            Margin percent - pourcentage de marge
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.MarginPrice">
            <summary>
            Margin price - prix margé
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.VATCode">
            <summary>
            ID of Value-Added Tax
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.Vat">
            <summary>
            VAT object
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.NetPrice">
            <summary>
            Total price - prix ttc
            CAUTION: this price shall be used only when some AttributeValues
            of a certain Attribute contain additional Net Price.
            In case we have an additional fee for a product in a menu for example,
            one shall not use this field, but the NetPrice on the ProductProductGroup instead.
            CAUTION 2: note that this price here is not displayed in the menu descriptions!
            CAUTION 3: when this ingredient is selected by the user, this price comes in addition
            to the one defined in the ProductproductGroup class (when in a Guided Activity).
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.Order">
            <summary>
            Used to sort attribute values ascendingly.
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.AttributeID">
            <summary>
            Identification number of linked attribute
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.Attribute">
            <summary>
            Linked attribute
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.Translations">
            <summary>
            Localized attribute value name.
            </summary>
        </member>
        <member name="P:Common.Contract.AttributeValue.DescriptionTranslations">
            <summary>
            Localized description.
            </summary>
        </member>
        <member name="T:Common.Contract.AttributeValueSelection">
            <summary>
            Selection mode for attribute
            </summary>
        </member>
        <member name="F:Common.Contract.AttributeValueSelection.None">
            <summary>
            The associated attribute cannot bring any value.
            This can be useful to declare a product as Vegan for example (no additional value required).
            </summary>
        </member>
        <member name="F:Common.Contract.AttributeValueSelection.Single">
            <summary>
            The associated attribute must have one single value attached.
            For instance, the baking attribute (cuisson in French) must be attached with a value like rare, medium-rare, well done etc.
            </summary>
        </member>
        <member name="F:Common.Contract.AttributeValueSelection.Multiple">
            <summary>
            The associated attribute is linked to a set of values.
            When thinking about sauces, one can imagine ordering several sauces for the same meat.
            </summary>
        </member>
        <member name="T:Common.Contract.Attribute">
            <summary>
            An attribute is attached to a product and further defines its properties.
            Attributes contain Attribute Values that can be selected by end user.
            Example: an attribute for baking and attibute values for rare, well done etc. Such an attribute would be swith single attrbiute value selection.
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.ExternalID">
            <summary>
            Optional third-party identification number.
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.Icon">
            <summary>
            URL to image
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.Shop">
            <summary>
            Shop
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.Name">
            <summary>
            Internal name . Not displayed to the user, but useful when looking at the Database rows.
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.ValueSelection">
            <summary>
            Specifies how many values need to be associated with this attribute.
            See the AttributeValueSelection enum for further details.
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.ProductAttributes">
            <summary>
            Link to products.
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.AttributeValues">
            <summary>
            Values associated to this attribute.
            </summary>
        </member>
        <member name="P:Common.Contract.Attribute.Translations">
            <summary>
            Localized texts for this attribute.
            </summary>
        </member>
        <member name="T:Common.Contract.Device">
            <summary>
            A Device is the main entity describing devices used or managed by the system.
            All other device types are subclasses of Device.
            A device instance can also represent a Mobile Phone.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Device.DefaultLanguage">
            <summary>
            Default 2-char ISO language code (or 2 char + counrty code like en-US).
            </summary>
        </member>
        <member name="P:Common.Contract.Device.NeedHelp">
            <summary>
            End user requested assistance to the waiters.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.Name">
            <summary>
            Name (unique per device type (SmartTable, Tablet, Kiosk etc.)
            </summary>
        </member>
        <member name="P:Common.Contract.Device.AppVersion">
            <summary>
            The version of the app this device is running
            </summary>
        </member>
        <member name="P:Common.Contract.Device.OrderHeaders">
            <summary>
            list of OrderHeaders ordered with this device
            </summary>
        </member>
        <member name="P:Common.Contract.Device.LandedOrderHeaders">
            <summary>
            List of OrderHeaders that have changed their Device to this one.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.LockedOrderHeaders">
            <summary>
            List of OrderHEaders locked by this device.
            This is useful when editing an order.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.Connected">
            <summary>
            When true, this device is connected to the system.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.TableUsers">
            <summary>
            Link to the users using this device
            </summary>
        </member>
        <member name="P:Common.Contract.Device.NotifConnectionName">
            <summary>
            Notification Connection Name
            Used by the Notificaton Service to callback the device.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.LastActivityDateTime">
            <summary>
            Time of last activity of the device
            </summary>
        </member>
        <member name="P:Common.Contract.Device.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Device.ShopGroupID">
            <summary>
            Shop group identification number (Obsolete)
            </summary>
        </member>
        <member name="P:Common.Contract.Device.Shop">
            <summary>
            Linked shop
            </summary>
        </member>
        <member name="P:Common.Contract.Device.ShopGroup">
            <summary>
            Linked Shop Group (obsolete)
            </summary>
        </member>
        <member name="P:Common.Contract.Device.EntityID">
            <summary>
            Id of the profit center this smart table is located in
            </summary>
        </member>
        <member name="P:Common.Contract.Device.Entity">
            <summary>
            Linked ProfitCenter
            </summary>
        </member>
        <member name="P:Common.Contract.Device.MacAddress">
            <summary>
            Last known used Mac address for this device.
            It is upper case, with no special characters (':' or '-').
            </summary>
        </member>
        <member name="P:Common.Contract.Device.ExternalID">
            <summary>
            In case we are linked to an external system (like a cash register),
            this column allows storage of external system Id for the corresponding entity in this third-party system.
            </summary>
        </member>
        <member name="P:Common.Contract.Device.AverageOccupationDuration">
            <summary>
            Obsolete
            </summary>
        </member>
        <member name="P:Common.Contract.Device.TableBookings">
            <summary>
            List of bookings for this device (most likely for SmartTables)
            </summary>
        </member>
        <member name="T:Common.Contract.Feature">
            <summary>
            A feature can either be active or desactivated and can bring additional parameters.
            This is how the system adapts its behavior to customers.
            </summary>
        </member>
        <member name="M:Common.Contract.Feature.#ctor">
            <summary>
            Default costructors
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.NameFeature">
            <summary>
            Name of the feature as enumerate.
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.Name">
            <summary>
            Feature Name
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.SubName">
            <summary>
            Subname
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.Parameters">
            <summary>
            Parameters separated by a pipe character.
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.ParentID">
            <summary>
            Parent feature id. Used for menu definition.
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.ParentFeature">
            <summary>
            Parent feature (with ParentID id).
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.Order">
            <summary>
            Optional Level display in Menu
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.LookAndFeelID">
            <summary>
            Link toward the Icon for this item
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.LookAndFeel">
            <summary>
            Linked Look and feel (image)
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.PageName">
            <summary>
            Name of the XAML Page
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.Available">
            <summary>
            Determine is this feature apply for the current entity (used to define if menu entry should be visible or not in mobile or tablet)
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.Translations">
            <summary>
            Localized name (not used).
            </summary>
        </member>
        <member name="P:Common.Contract.Feature.Type">
            <summary>
            Feature type
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Admin">
            <summary>
            Admin of all system for all shops
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Owner">
            <summary>
            Admin of his/her shops
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Waiter">
            <summary>
            Room Services
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Bartender">
            <summary>
            Beverage producer
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Cooker">
            <summary>
            Food producer
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.BusinessIntelligence">
            <summary>
            Access to BI reports
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Cashier">
            <summary>
            Receives payments
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.SmartTable">
            <summary>
            SmartTables
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Mobile">
            <summary>
            Mobile
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.CashRegister">
            <summary>
            Cash Register
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.WebSite">
            <summary>
            Web site
            </summary>
        </member>
        <member name="F:Common.Contract.UserRole.Reseller">
            <summary>
            Reseller of the solution.
            </summary>
        </member>
        <member name="P:Common.Contract.ApplicationUser.UserID">
            <summary>
            Link toward the User.ID field.
            </summary>
        </member>
        <member name="M:Common.Contract.ApplicationUser.GenerateUserIdentityAsync(Microsoft.AspNet.Identity.UserManager{Common.Contract.ApplicationUser})">
            <summary>
            Create a link from the Identity User table to the Application User table
            @See http://blogs.msdn.com/b/webdev/archive/2013/10/16/customizing-profile-information-in-asp-net-identity-in-vs-2013-templates.aspx
            </summary>
        </member>
        <member name="T:Common.Contract.LookAndFeel">
            <summary>
            Defines displayed elements : images, fonts, colors
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.ShopGroupID">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.XamlPageName">
            <summary>
            Name of XAML Page. Not used
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.XamlNodeName">
            <summary>
            Node name of the XAML Page (Not used)
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.Key">
            <summary>
            Name of the Look And Feel entry
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.Val">
            <summary>
            Value of the LnF
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.Shop">
            <summary>
            Linked Shop
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.ShopGroup">
            <summary>
            Not used
            </summary>
        </member>
        <member name="T:Common.Contract.LookAndFeel.LookAndFeelType">
            <summary>
            List of possible LnF Types
            </summary>
        </member>
        <member name="F:Common.Contract.LookAndFeel.LookAndFeelType.FILE">
            <summary>
            Local ressource file
            </summary>
        </member>
        <member name="F:Common.Contract.LookAndFeel.LookAndFeelType.SIZE">
            <summary>
            For fonts
            </summary>
        </member>
        <member name="F:Common.Contract.LookAndFeel.LookAndFeelType.TEMPLATE">
            <summary>
            Text template
            </summary>
        </member>
        <member name="F:Common.Contract.LookAndFeel.LookAndFeelType.URL">
            <summary>
            URL to resource
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.Type">
            <summary>
            See enumeration for further details
            </summary>
        </member>
        <member name="P:Common.Contract.LookAndFeel.TypeString">
            <summary>
            String representation of the Type property.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderDetail">
            <summary>
            Defines a row of an OrderHeader.
            It links a product to the Order, along with its ingredients, attributs, quantities and discounts.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.Tracker">
            <summary>
            Used to track the properties that are set by frontend code.
            This allows partial update of this object.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.UpdatedPropertyNames">
            <summary>
            This property can be set by frontend code to tell the server
            which properties ahve been changed. This mechanism comes in addition to the tracker above
            and takes precedence over it. This is used by the SmartTable in order to update only parts of the OrderDetail
            values on the WCF side.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.OrderHeaderID">
            <summary>
            Used to identify OrderHeader
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.OrderHeader_ShopID">
            <summary>
            Used to identify OrderHeader
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Common.Contract.OrderDetail.OriginalOrderHeaderID" -->
        <member name="P:Common.Contract.OrderDetail.PersonID">
            <summary>
            Used to identify the Ordering Person
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.ProductNetPrice">
            <summary>
            Product NetPrice at the time of ordering.
            This is useful when PriceLists are defined for the Product.
            It is used for Price Computation on Cash Register side.
            
            It is NOT multiplied by quantity.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.UnitNetPrice">
            <summary>
            Includes Children but not multipled by quantity of parent.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.NetPriceWithChildren">
            <summary>
            Holds the current OrderDetail NetPrice plus Net prices of children.
            This is BEFORE any amount is deducted from this price (coupons, sales, etc.)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.NegociatedNetPrice">
            <summary>
            This is the final price of the Orderdetail.
            Set to null on child OrderDetails.
            When on a Parent OrderDetail (that has no Parent), it either contains the NetPrice
            or the value set on Cash Register when a lower price is decided (for coupons, sales, friends or 
            in case something went wrong during service).
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.RemainingNetPrice">
            <summary>
            Amount not yet payed (compared to NegociatedNetPrice).
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.NetPrice">
            <summary>
            Net Price is already multiplied by the quantity of the OrderDetail.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.DiscountPercent">
            <summary>
            Discount Percent of NetPrice
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.DiscountAmount">
            <summary>
            Discount Amount of NetPrice
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.IsPrepared">
            <summary>
            Used to indicate this OrderDetail has been sent to the WorkArea Printer.
            Means IsPrinted with a PRODUCTION ticket.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.HasBeenSentToCashRegister">
            <summary>
            Set to true when the notification for this order is sent to the cash register 
            (is false when an order is not yet sent because there is still some tablet ordering)
            if not set => true (legacy for orders before this flag was added)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.Cancelled">
            <summary>
            CAUTION: when this flag is set to true, this OrderDetail and its children are CANCELED from
            the Order. So their price must not be taken into account and not printed on customer receipts.
            However, they must be printed on production tickets.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.Comment">
            <summary>
            Optional comment customers may set regarding a product.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.ProductGroupID">
            <summary>
            Used to find the price of a Mobile Order product so that there is no NetPrice transiting back and forth between the Mobile App and the WCF Sever.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.CourseIndex">
            <summary>
            The index of the course this order is part of
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetail.OrderIndex">
            <summary>
            Index this order among all order detail of the order header
            </summary>
        </member>
        <member name="T:Common.Contract.OrderDetailIngredient">
            <summary>
            Links an OrderDetail to an Ingredient.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetailIngredient.Added">
            <summary>
            Added is set to true if Ingredient is Additional and user selected it.
            It is set to false when Ingredient is Optional and user UNselected it.
            There is no OrderDetailIngredient object for 
             - Mandatory Ingredients.
             - Selected free optional Ingredients.
             - Unselected Additional ingredients
            
                                 |   Selected  |  Unselected   |
              -------------------------------------------------|
              Mandatory          | Not Created |      N/A      |
              Optional Free      | Not Created | Created (sans)|
              Optional Billable  |   Created   | Created (sans)|
              Additional         |   Created   |  Not Created  |
            
            
            NetPrice to be added to OrderDetail NetPrice only if Added = 1.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetailIngredient.NetPrice">
            <summary>
            NetPrice to be added to OrderDetail NetPrice only if Added = 1
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetailIngredient.CourseIndex">
            <summary>
            The index of the course this order is part of
            </summary>
        </member>
        <member name="P:Common.Contract.OrderDetailIngredient.OrderIndex">
            <summary>
            Index this order among all order detail of the order header
            </summary>
        </member>
        <member name="T:Common.Contract.OrderHeader">
            <summary>
            Defines an order and its main properties.
            It basically holds a list of OrderDetails containing bought products.
            </summary>
        </member>
        <member name="M:Common.Contract.OrderHeader.TrackChanges">
            <summary>
            If called will start tracking changes so that when we copy to db object we only copy properties which have been set
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.UpdatedPropertyNames">
            <summary>
            This property can be set by frontend code to tell the server
            which properties ahve been changed. This mechanism comes in addition to the tracker above
            and takes precedence over it. This is used by the SmartTable in order to update only parts of the OrderDetail
            values on the WCF side.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.ShopID">
            <summary>
            First^part of the identification key
            Keys are created manually based on the OrderHeaderPK table content.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.ID">
            <summary>
            Second part of the Identification key
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.DeviceID">
            <summary>
            When set to null, it means performed from a Mobile device.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.ExternalGuid">
            <summary>
            Optional third-party ID
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.EntityID">
            <summary>
            Linked entity ID
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Common.Contract.OrderHeader.LandingDeviceID" -->
        <member name="P:Common.Contract.OrderHeader.LandingDatetime">
            <summary>
            This is used for mobile and web site Orders.
            The datetime stored here holds the time at which the user
            sat to a table to have lunch.
            See as well the LandingDeviceID property.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.EmployeeID">
            <summary>
            Creator of the order when not done via the table.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.IdZCash">
            <summary>
            Used to identify day of year this order is linked to.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.Tipped">
            <summary>
            This is used in the cash register app to flag an order header as being entered 
            in the second main cash register system.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.OrderPaymentsSentToCashRegisters">
            <summary>
            This is used to tell CashRegisters there are some finalized OrderPayments that are not yet sent 
            to them. They exist in case of Prepayment mode when Orders are meant to remain open on Cash Register side.
            This is why we wait for the Cash Register to retrieve them manually.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.NetPrice">
            <summary>
            Total Net Price (including VAT)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.LockingDeviceID">
            <summary>
            Id of the device locking this order.
            Set to null or 0 when not locked.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.ReadableOrderNumber">
            <summary>
            4-digit Number used to identify the orderand gien ot the end user.
            This is what will also be displayed on the cash register for the 
            shop tenant to identify the order has well.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.ArrivalDatetime">
            <summary>
            Local Time of foreseen arrival date (for pre-orders)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.PaymentClientSessionID">
            <summary>
            Used to identify Order Header when called from the payment provider.
            This is to avoid providing real OrderHeader Id.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.NbDiners">
            <summary>
            Number of guests
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.PaymentDivided">
            <summary>
            Is payment divided in equal parts?
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.DiscountPercent">
            <summary>
            Discount set using Cash Register: Percent of NetPrice
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.DiscountAmount">
            <summary>
            Discount set using Cash Register: Amount of NetPrice
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.Employee">
            <summary>
            Creator when not done via the table.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.Entity">
            <summary>
            Entity in which the command is made.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.OriginalOrderDetails">
            <summary>
            These OrderDetails are set only for mobile/web OrderHeaders.
            They correspond to the list of initial OrderDetails, "Before" 
            they have been moved to a table's OrderHeader. 
            This list is then available after this move through this OriginalOrderDetails property.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.CouponPersons">
            <summary>
            List of coupons applied ot this order.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderHeader.CurrentCourseIndex">
            <summary>
            Index of the course which is currently beeing produced
            </summary>
        </member>
        <member name="T:Common.Contract.OrderHeaderPK">
            <summary>
            Order HEader Primary Key class used to uniquely identify OrderHEaders per Shop.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderPayment">
            <summary>
            A payment for a receipt of an OrderHeader.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.NetPrice">
            <summary>
            CAUTION: the NetPrice does NOT take the Tip amount into account.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.Tip">
            <summary>
            Optional Tip for a payment
            CAUTION: the NetPrice above does NOT take the Tip amount into account.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.OrderHeaderID">
            <summary>
            If not null => order payment
            else => payment for a user to credit his account (in which case @PersonID shall not be null)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.OriginalOrderHeaderID">
            <summary>
            Used to identify the mobile OrderHeader that was initially linked to this OrderPayment instance.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.PersonID">
            <summary>
            see @OrderHeaderID
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.SentToCashRegisters">
            <summary>
            Set to true when the notification for this OrderDetail is sent to the cash register.
            If null => true (legacy for orders before this flag was added).
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.NbPartInSplit">
            <summary>
            In case it's a payment corresponding to a split on the total, the nb of parts it has been splitted in
            (otherwise 0 if this is a partial payment)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderPayment.OriginalOrderHeader">
            <summary>
            Used to identify the mobile OrderHeader that was initially linked to this OrderPayment instance.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderPaymentDetail">
            <summary>
            Links a Payment to corresponding OrderDetails.
            </summary>
        </member>
        <member name="T:Common.Contract.OrderStateValue">
            <summary>
            Depicts the OrderHeader status.
            </summary>
        </member>
        <member name="F:Common.Contract.OrderStateValue.Declined">
            <summary>
            Refused by customer
            </summary>
        </member>
        <member name="F:Common.Contract.OrderStateValue.PreOrderPaymentPending">
            <summary>
            Status when ordering on the phone. Pre-order is not yet payed.
            </summary>
        </member>
        <member name="F:Common.Contract.OrderStateValue.PreOrdered">
            <summary>
            Status after ordering on the phone. Pre-order is payed.
            </summary>
        </member>
        <member name="F:Common.Contract.OrderStateValue.Consolidated">
            <summary>
            Taken into account by Z Cash.
            </summary>
        </member>
        <member name="F:Common.Contract.MeanOfPayment.deferred">
            <summary>
            Will be payed later on.
            </summary>
        </member>
        <member name="F:Common.Contract.MeanOfPayment.free">
            <summary>
            DO NOT USE FOR PAYMENT! USE DISCOUNTS INSTEAD!
            This is used when part of the orderHeader is free (not necessarily a plain number or OrderDetails).
            It can also be used for prepayed loyalty cards (meaning cards given by restaurateurs to users with some free amount on it)
            </summary>
        </member>
        <member name="F:Common.Contract.MeanOfPayment.DownPaymentRecovery">
            <summary>
            User pays with Down Payment ( = acompte)
            Reprise d'acompte
            </summary>
        </member>
        <member name="P:Common.Contract.Person.ListPropertyWhichHaveBeenSet">
            <summary>
            Used to track properties which were actually sent as part of the wcf call
            </summary>
        </member>
        <member name="M:Common.Contract.Person.PropertyIsSet(System.String)">
            <summary>
            Used to track properties which were actually sent as part of the wcf call
            CAUTION: DO NOT USE THIS METHOD FOR VITUAL NAVIGATION PROPERTIES.
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Common.Contract.Person.HasBeenSet(System.String)">
            <summary>
            Return true if the property with the specified name has been set during deserialisation
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Common.Contract.Person.SponsoringPending">
            <summary>
            When a sponsor sends an invitation to a sponsee, 
            the sponsee instance is creates and stored to the DB with the
            SponsoringPending flag set.
            This flag is cleared upon first login of the sponsee.
            </summary>
        </member>
        <member name="P:Common.Contract.Person.PrivacyPreferences">
            <summary>
            Privacy preferences
            </summary>
        </member>
        <member name="P:Common.Contract.Person.PublicID">
            <summary>
            Person Id that can be showed to the user.
            For security reason, we do not show the real ID.
            So this one is a GUID that does not easily help finding the ID of another person 
            for security reason.
            </summary>
        </member>
        <member name="P:Common.Contract.Printer.Address">
            <summary>
            Contains the Print server and the printer name using this syntax:
            \\ServerName\PrinterName
            </summary>
        </member>
        <member name="T:Common.Contract.ImageScaling">
            <summary>
            Possible processing performed on Product image when resizing it destination UI container.
            </summary>
        </member>
        <member name="T:Common.Contract.Product">
            <summary>
            A Product is one of the main entities of the system.
            It defines a object that can be sold.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ListPropertyWhichHaveBeenSet">
            <summary>
            Used to track properties which were actually sent as part of the wcf call
            </summary>
        </member>
        <member name="M:Common.Contract.Product.HasBeenSet(System.String)">
            <summary>
            Return true if the property with the specified name has been set during deserialisation
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="P:Common.Contract.Product.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ExternalID">
            <summary>
            Optional id of an external third-party system.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Version">
            <summary>
            Version of the product defintion. This is llinked to the ProductVersion table.
            Only the last version is supposed to be sold. Others are kept for archiving reason.
            Defaults to 1.
            This is obsolete and will be removed in the future.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Name">
            <summary>
            Product Name. CAUTION: this is the short description. Only readable by employees.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Code">
            <summary>
            Optional code defining this product.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.UnitName">
            <summary>
            ISO Unit names can be found here: http://www.unece.org/cefact/codesfortrade/codes_index.html
            in the zip file at the bottom right corner.
            Adding PCE for Piece
            The ones we use:
            MTR: 1 metre (m)
            LTR: 1 litre (1000 l = 1 m3)
            CLT: 1 centilitre (100 cl = 1l)
            KGM: 1 kilogram (Kg)
            GRM: 1 gram (1000 g = 1 Kg)
            PCE: 1 piece
            </summary>
        </member>
        <member name="P:Common.Contract.Product.GrossPrice">
            <summary>
            Price without VAT
            </summary>
        </member>
        <member name="P:Common.Contract.Product.MarginPercentage">
            <summary>
            Margin percentage - pourcentage de marge
            </summary>
        </member>
        <member name="P:Common.Contract.Product.MarginPrice">
            <summary>
            Margin price - prix margé
            </summary>
        </member>
        <member name="P:Common.Contract.Product.NetPrice">
            <summary>
            Product Net Price (with VAT)
            CAUTION: Make sure there is no PriceList defined that need to be applied in order to get a new net price.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.DisableDistanceSelling">
            <summary>
            Disable Distance Selling:
            When set to true, the product is not visible in both the Mobile application and web site.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.VATCode">
            <summary>
            VAT ID
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Vat">
            <summary>
            VAT instance linked to this product.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Available">
            <summary>
            When true, available for selling. When false, not available.
            CAUTION: a product is visible in a catalog only if it is available and linked to a ProductGroup that is also visible.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.GuidedActivityID">
            <summary>
            Optional id of the Guided Activity that needs to be started as soon the user selects this product to buy.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.OrderDetails">
            <summary>
            List of OrderDetails referencing this product.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ProductWorkAreas">
            <summary>
            Linked Work areas (Kitchen, bar etc.)
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Validities">
            <summary>
            Optional list of period of time when this product can be sold.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.BeerDispenserTables">
            <summary>
            Optional Beer dispenser tables selling this product.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Icon">
            <summary>
            URL of Image
            </summary>
        </member>
        <member name="P:Common.Contract.Product.IconScaling">
            <summary>
            Define how to scale icons when they are rendered (uniform to fill, uniform to fit).
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Home">
            <summary>
            Home flag.
            See enumeration for durther details.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Position">
            <summary>
            Display order in the list 
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Color">
            <summary>
            Color used to display this product in the Cash Register
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ProductAttributes">
            <summary>
            Optional list of linked attributes.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ProductIngredients">
            <summary>
            Optional list of linked ingredients
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ProductProductGroups">
            <summary>
            Links to Product Groups holding this product
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Shop">
            <summary>
            Shop instance
            </summary>
        </member>
        <member name="P:Common.Contract.Product.GuidedActivity">
            <summary>
            Guided Activity instance refered to by the GuidedActivityId property.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.TitleTranslations">
            <summary>
            Localized text of the Product title
            </summary>
        </member>
        <member name="P:Common.Contract.Product.SubtitleTranslations">
            <summary>
            Localized text of the product sub-title (meaning its description).
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ProductAllergens">
            <summary>
            Optional links to allergens
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ActiveStock">
            <summary>
            Flag telling if the remaining stock quantity must be handled. 
            See Quantity property.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.Shortage">
            <summary>
            When set, this product is out of stock and thus cannot be sold until further notice.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.WorkingOrder">
            <summary>
            Helps to know if this Porudct ia formula or a simple product.
            See as well GuidedActivity.GuidedActivityType.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.ProductSuppliers">
            <summary>
            Optional list of suppliers for this product
            </summary>
        </member>
        <member name="P:Common.Contract.Product.BarCodes">
            <summary>
            Optional bar codes defined for this product. There may be different bar codes depending of suppliers.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.PriceLists">
            <summary>
            Optional price lists attached to this product.
            </summary>
        </member>
        <member name="P:Common.Contract.Product.CouponProducts">
            <summary>
            Optional Coupons attached
            </summary>
        </member>
        <member name="P:Common.Contract.Product.TvProductScreens">
            <summary>
            Optional TV Screens showing this product.
            </summary>
        </member>
        <member name="T:Common.Contract.ProductAllergen">
            <summary>
            Link between a Product and an Allergen
            </summary>
        </member>
        <member name="T:Common.Contract.IngredientAllergen">
            <summary>
            Links an ingredient to an allergen.
            </summary>
        </member>
        <member name="P:Common.Contract.IngredientAllergen.IngredientID">
            <summary>
            Ingredient ID
            </summary>
        </member>
        <member name="P:Common.Contract.IngredientAllergen.AllergenID">
            <summary>
            Allergen ID
            </summary>
        </member>
        <member name="P:Common.Contract.IngredientAllergen.Ingredient">
            <summary>
            Linked Ingredient
            </summary>
        </member>
        <member name="P:Common.Contract.IngredientAllergen.Allergen">
            <summary>
            Linked Allergen
            </summary>
        </member>
        <member name="T:Common.Contract.ProductAttribute">
            <summary>
            Link between a Product and an Attribute
            </summary>
        </member>
        <member name="T:Common.Contract.ProductGroup">
            <summary>
            Groups products together.
            This can be used as an ordered list of products to display in the catalog, 
            but as well as a Guided Activity step definition (see GuidedActivityProductGroup). 
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ExternalID">
            <summary>
            Optional third-party system identification number for this ProductGroup
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Name">
            <summary>
            Internal name of the group (not displayed to the end user (except in Cash register).
            It is better to be unique so that this is compatible with all third-party systems.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ParentGroupID">
            <summary>
            Optional PrentGroup ID. This is useful when defining a hierarchy of product groups
            to display in the catalog.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ShopID">
            <summary>
            Shop Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Available">
            <summary>
            CAUTION: when not available, it is not there in both the catalog menu and in the Guided Activity.
            See Visible property for more information.
            CAUTION2: a product is visible in the catalog if it is available and part of a product group that is available as well.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Visible">
            <summary>
            CAUTION: Visible is used to know if a Product Group is used only in a Guided Activity.
            So if it is not visible, it won't be displayed in the catalog menu, but still usable in the Guided Activity.
            See Available property for more information.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Icon">
            <summary>
            Image URL. It is always better to use public URL so that it can be accessed from outside the shop.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Position">
            <summary>
            Product groups are ordered inside their parents. Their order is defined using this Position property.
            They are shown to the user sorted ascendingly on their Position property.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Color">
            <summary>
            Color used as tile background in cuddl'up cash register
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ProductProductGroups">
            <summary>
            List of linked ProductProductGroups used to list the embedded Products.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ParentGroup">
            <summary>
            Parent ProductGroup
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ChildGroups">
            <summary>
            List of Child ProductGroups
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.GuidedActivityProductGroups">
            <summary>
            List of GuideedActivityProductGroups linked to this object. This is used durgin Guided Activity step definition.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.Translations">
            <summary>
            Localized list of ProductGroup names.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.IsSelected">
            <summary>
            Selection management. Not mapped to database.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ProductGroupTypeID">
            <summary>
            Obsolete. This property will be replaced by the ProfitCenter and Entity mechanism to group ProductGroup together.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.ProductGroupType">
            <summary>
            Obsolete, see ProductGroupTypeID property for futher information.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductGroup.CouponProductGroups">
            <summary>
            List of linked Coupons
            </summary>
        </member>
        <member name="T:Common.Contract.ProductIngredient">
            <summary>
            Link between a Product and an Ingredient.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductIngredient.Additionnal">
            <summary>
            Mandatory:  Ingredient is part of the product and cannot be removed
            Optional:   Ingredient is part of the product by default and CAN be removed
            Additional: Ingredient is NOT part of the product by default but can be added.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductIngredient.Mandatory">
            <summary>
            Mandatory:  Ingredient is part of the product and cannot be removed
            Optional:   Ingredient is part of the product by default and CAN be removed
            Additional: Ingredient is NOT part of the product by default but can be added.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductIngredient.Optional">
            <summary>
            Mandatory:  Ingredient is part of the product and cannot be removed
            Optional:   Ingredient is part of the product by default and CAN be removed
            Additional: Ingredient is NOT part of the product by default but can be added.
            </summary>
        </member>
        <member name="T:Common.Contract.ProductProductGroup">
            <summary>
            Link between a ProductGroup and a Product.
            Defines as well an optional price override when a product is selected via the linked product group.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductProductGroup.NetPrice">
            <summary>
            This price takes precedence to the Product Price.
            Note that if the linked product has AttributeValues or Ingredients
            with non-null NetPrices, and they are selected by the user, those NetPrices 
            will be added to the NetPrice of the ProductProductGroup.
            </summary>
        </member>
        <member name="T:Common.Contract.ProductVersion">
            <summary>
            Due to archiving process, product history definition is (so far) kept to store past commands and their associated products.
            So there can be several versions of the same product in the database.
            This entity will be replaced in the future by an archiving process where all needed information will be duplicated so as to remain standalone and independant
            of the product definitions.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductVersion.ProductName">
            <summary>
            Unique Product Name (this acts as the DB Table key)
            </summary>
        </member>
        <member name="P:Common.Contract.ProductVersion.ShopID">
            <summary>
            Shop identification number
            </summary>
        </member>
        <member name="P:Common.Contract.ProductVersion.Version">
            <summary>
            Version. Starts at 1.
            </summary>
        </member>
        <member name="P:Common.Contract.ProductVersion.ProductID">
            <summary>
            Linked product ID
            </summary>
        </member>
        <member name="P:Common.Contract.ProductVersion.Product">
            <summary>
            Linked Product
            </summary>
        </member>
        <member name="T:Common.Contract.OperationResult">
            <summary>
            OperationResult is base class of all WCF methods' return types.
            </summary>
        </member>
        <member name="P:Common.Contract.OperationResult.Success">
            <summary>
            Method call is successful when this field is set to true.
            When false, check Message and MesageNb for further details.
            </summary>
        </member>
        <member name="P:Common.Contract.OperationResult.MessageNb">
            <summary>
            Messa ge numbber can be used to automatically identifiy message, without taking care of translations.
            </summary>
        </member>
        <member name="P:Common.Contract.OperationResult.ErrorStatus">
            <summary>
            The status is not added to the deserialisation because otherwise it make deserialisation of unknown enum code explode for unknown enum
            </summary>
        </member>
        <member name="P:Common.Contract.OperationResult.Message">
            <summary>
            Translated error message.
            </summary>
        </member>
        <member name="P:Common.Contract.BeerOrderInfo.Quantity">
            <summary>
            Beer quantity info for that specific day
            </summary>
        </member>
        <member name="P:Common.Contract.LastSalesRevenueOperationResult.TotalQuantity">
            <summary>
            Total product quantity
            </summary>
        </member>
        <member name="P:Common.Contract.LastSalesRevenueOperationResult.TotalSalesRevenue">
            <summary>
            Total net Price (VAT Included)
            </summary>
        </member>
        <member name="P:Common.Contract.BalanceOperationResult.Balance">
            <summary>
            Current user balance (available money on his/her account)
            </summary>
        </member>
        <member name="P:Common.Contract.OrderOperationResult.NbTabletsThatHaveOrdered">
            <summary>
            Number of tablets that have already send their order for current table.
            This property is set only when called from a tablet.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderOperationResult.NbOrderingTabletsForThisTable">
            <summary>
            Total number of tablets that shall send orders for current table (and have not already ordered).
            This property is set only when called from a tablet.
            </summary>
        </member>
        <member name="P:Common.Contract.OrderOperationResult.IsOrderingLocked">
            <summary>
            Will return true if ordering cannot process because ordering is currently locked by cash register
            </summary>
        </member>
        <member name="F:Common.Contract.LinkDelivery.None">
            <summary>
            Will just return the link
            </summary>
        </member>
        <member name="F:Common.Contract.LinkDelivery.Sms">
            <summary>
            Send link by sms
            </summary>
        </member>
        <member name="P:Common.Contract.UpdateOrderDetailsOperationResult.AddedOrderDetailIds">
            <summary>
            Key is the external ID
            Value is our ID
            </summary>
        </member>
        <member name="P:Common.Contract.ShopsOperationResult.ShopLogos">
            <summary>
            Key = ShopID, value = absolute Url to image
            </summary>
        </member>
        <member name="P:Common.Contract.CreateOrderPaymentInExistingReceiptOperationResult.OrderPayment">
            <summary>
            Holds the newly-created OrderPayment.
            This is used to send the new DB ID back to the caller.
            (and also maybe in the future the IDs of the underlying OrderPaymentDetail instances).
            </summary>
        </member>
        <member name="P:Common.Contract.CachedOperationResult.LastDataUpdate">
            <summary>
            Holds the timestamp used to manage frontend cache.
            This timestamp corresponds to the last known data update on server side (GMT).
            </summary>
        </member>
        <member name="P:Common.Contract.CachedOperationResult.SkippedProperties">
            <summary>
            This list holds the names of the properties that are not provided here for performance
            optimization purpose. This is linked to the last synchronization timestamp provided by the frontend.
            </summary>
        </member>
        <member name="P:Common.Contract.AppVersionResult.AppInfo">
            <summary>
            Information about 
            </summary>
        </member>
        <member name="P:Common.Contract.AppVersionResult.TabletVersion">
            <summary>
            Current version of the tablet application
            
            </summary>
        </member>
        <member name="P:Common.Contract.AppVersionResult.PackageDownloadDomain">
            <summary>
            The domain the package will be downloaded from. If null use the domain of the serveur this is querried from
            </summary>
        </member>
        <member name="P:Common.Contract.AppVersionResult.PackageDownloadRelativePath">
            <summary>
            the path of the file to download relative to the domain
            </summary>
        </member>
        <member name="P:Common.Contract.ShopDataOperationResult.EntityId">
            <summary>
            The id of the the entity (should be a profit center) which have been found and used to load the overrides
            </summary>
        </member>
        <member name="P:Common.Contract.TabletConnectOperationResult.User">
            <summary>
            Guest user if just created.
            </summary>
        </member>
        <member name="P:Common.Contract.TableConnectOperationResult.Table">
            <summary>
            CAUTION: when running in Kiosk mode, this Table property is of Kiosk type.
            </summary>
        </member>
        <member name="P:Common.Contract.TotalPayments.TotalNetPrice">
            <summary>
            Don't include price
            </summary>
        </member>
        <member name="P:Common.Contract.PaymentsResult.NbPartInSplit">
            <summary>
            The nb of part the total has been splited in
            </summary>
        </member>
        <member name="P:Common.Contract.PaymentsResult.NbPartInSplitAlreadyPaid">
            <summary>
            the number of part which have already been paid (or payment is in progress) when doing a split on the total
            </summary>
        </member>
        <member name="P:Common.Contract.PaymentsResult.SplitAmount">
            <summary>
            The amount corresponding to one split part
            </summary>
        </member>
        <member name="P:Common.Contract.IsLockedOrderHeaderOperationResult.LockingDeviceId">
            <summary>
            In case a table or cash register lock the order header, this will be the id of the device which have taken the lock
            </summary>
        </member>
        <member name="P:Common.Contract.IsLockedOrderHeaderOperationResult.LockingDeviceName">
            <summary>
            In case a table or cash register lock the order header, this will be the id of the device which have taken the lock
            </summary>
        </member>
        <member name="P:Common.Contract.IsLockedOrderHeaderOperationResult.LockedByTablet">
            <summary>
            In case a tablet lock the order header, the list of tablet with the lock
            </summary>
        </member>
        <member name="P:Common.Contract.IFilterResult.RequestNumber">
            <summary>
            Holds the requestNumber so that the client can make sure this is the result of the latest request sent to the server.
            </summary>
        </member>
        <member name="P:Common.Contract.IFilterResult.NbPages">
            <summary>
            Total number of pages. This value is set only if the PageSize is > 0 in the request.
            </summary>
        </member>
        <member name="P:Common.Contract.QueryWithElementsRequest.Elements">
            <summary>
            Retrieved elements(objects).
            </summary>
        </member>
        <member name="P:Common.Contract.GetQueryOperationResult.Elements">
            <summary>
            Retrieved elements(objects).
            </summary>
        </member>
        <member name="P:Common.Contract.AddQueryOperationResult.ElementIds">
            <summary>
            Database ids of elements in same order as provided elements.
            First dimension is for each object provided to the Add method to be added.
            Second dimension is for the key fields.
            </summary>
        </member>
        <member name="P:Common.Contract.GetAllDevicesOperationResult.Dictionnary">
            <summary>
            Key = device ID
            Value = Tuple(device Name, device type as string)
            </summary>
        </member>
        <member name="P:Common.Contract.GetProductsOperationResult.PriceRateSchedules">
            <summary>
            Schedule for each price rate, only schedule for current shop are returned
            </summary>
        </member>
        <member name="T:Common.Contract.ChangeScope">
            <summary>
            Define at which level changes will apply
            </summary>
        </member>
        <member name="F:Common.Contract.ChangeScope.ApplyToChildWithoutOverride">
            <summary>
            A value change will only apply to current node if it has been overriden in child node
            If child node don't have an override  defined then it will be inherited
            * Exemple 1: Copany has a price at 2, Mobile don't have any override
            Company price is changed to 3
            => both company and mobile price will have the new price 3
            * Exemple 2: Copany has a price at 2, Mobile have override to 5
            Company price is changed to 3
            => Company price will be 2 but mobile price will be 5
            </summary>
        </member>
        <member name="F:Common.Contract.ChangeScope.ApplyToCurrentNodeOnly">
            <summary>
            If a change is made, it is not inherited by all descendant, instead a override is set on all descendant with original value
            Exemple : Company has price at 2, Mobile had same price
            Company price is changed to 3 
            => a Value override is created for Mobiles to set the price for mobile to 2
            (Mobile will still have the old price)
            </summary>
        </member>
        <member name="F:Common.Contract.ChangeScope.ApplyToAll">
            <summary>
            Change will apply to current node and all it's descendants. If an override has been defined on the descendant, there will be removed
            Exemple : Company has a price at 2, Mobile have override to 5
            Company price is changed to 3
            => both company and mobile price will have the new price 3
            </summary>
        </member>
        <member name="P:Common.Contract.PriceChangeRequest.ProductID">
            <summary>
            The id of the product to apply the new price too
            </summary>
        </member>
        <member name="P:Common.Contract.PriceChangeRequest.ProductGroupTypeID">
            <summary>
            
            </summary>
        </member>
        <member name="P:Common.Contract.PriceChangeRequest.NewPrice">
            <summary>
            The new price value
            </summary>
        </member>
        <member name="P:Common.Contract.PriceChangeRequest.Rate">
            <summary>
            The rate for which the new price will aply
            </summary>
        </member>
        <member name="P:Common.Contract.PersonDetailsOperationResult.OrderHeader">
            <summary>
            Current OrderHeader of tablet user
            </summary>
        </member>
        <member name="P:Common.Contract.PersonDetailsOperationResult.OrderDetails">
            <summary>
            Current Order details of tablet user.
            </summary>
        </member>
        <member name="T:Common.Contract.RuleSetWrapperOperationResult">
            <summary>
            Commont/ContractResult - Test only, will be removed
            </summary>
        </member>
        <member name="P:Common.Contract.Map.Name">
            <summary>
            Optionnal name of the map.
            This can be useful to define several rooms.
            </summary>
        </member>
        <member name="T:Common.Contract.Shop">
            <summary>
            Main entity of the Database. It defines a shop and acts as an entry point.
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.HttpPublicBaseUrl">
            <summary>
            Public HTTP base url like http://cuddlupsunvalbonne.dtdns.net:8000
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.HttpsPublicBaseUrl">
            <summary>
            Public HTTPS base url like https://cuddlupsunvalbonne.dtdns.net:443
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.PublicIPAddress">
            <summary>
            Public IP Address. Example: 20.30.40.50
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.CurrencyCode">
            <summary>
            CAUTION: MUST COMPLY TO ISO 4217 FORMAT.
            @See http://www.xe.com/iso4217.php
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.Timezone">
            <summary>
            Shop's TimeZone ID as defined in following page:
            See: http://www.xiirus.net/articles/article-_net-convert-datetime-from-one-timezone-to-another-7e44y.aspx
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.DefaultLanguageCode">
            <summary>
            Must comply to fr, fr-FR, en or en-US ISO format.
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.OrderingLocked">
            <summary>
            This is used when a day is closed to prevent frontend devices from ordering.
            Null means false.
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.BusinessNumber">
            <summary>
            SIRET
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.MinMobileBuildVersion">
            <summary>
            Holds a version number X.Y.Z (X = Major, Y = Minor, Z= Patch) that defines the smaller version number that is still
            compliant to the current Server API and Database schema.
            This is used for Mobile auto-update.
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.TabletBuildVersion">
            <summary>
            Current version of the application which should run on tablet
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.TabletPackageRelPath">
            <summary>
            Relatif path to the package of the application to be installed on tablets
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.CashRegisterUrl">
            <summary>
            Used for external Cash Registers
            </summary>
        </member>
        <member name="P:Common.Contract.Shop.SmsSenderName">
            <summary>
            SMS Sender Name.
            If not set, uses the shop name, with removal of accents and special chars.
            </summary>
        </member>
        <member name="T:Common.Contract.CashRegister">
            <summary>
            Defines a Cash Register used to receive and edit orders and payments.
            </summary>
        </member>
        <member name="P:Common.Contract.CashRegister.IsPrintServer">
            <summary>
            When CashRegisterGroups are used, the IsPrintServer is valid for current Cash Register Group only.
            </summary>
        </member>
        <member name="P:Common.Contract.CashRegister.PrinterID">
            <summary>
            This printer here is used for end user receipt printing.
            This is NOT used for Production Ticket printing (see WorkAreas instead).
            This property is used only if IsPrintServer is true.
            </summary>
        </member>
        <member name="T:Common.Contract.SmartTableShape">
            <summary>
            Drawing shapes for table map.
            </summary>
        </member>
        <member name="T:Common.Contract.SmartTable">
            <summary>
            Represents a SmartTable (connected or not)
            </summary>
        </member>
        <member name="P:Common.Contract.SmartTable.Free">
            <summary>
            Set to true when this device is available for new End Users.
            </summary>
        </member>
        <member name="P:Common.Contract.SmartTable.Locked">
            <summary>
            When true, this device cannot be used anymore until it gets unlocked from the Cash Register.
            </summary>
        </member>
        <member name="P:Common.Contract.SmartTable.IsInteractive">
            <summary>
            When true or null, the table is an interactive, touch-enabled SmartTable.
            When false, this is a regular table without any computer or touch device attached.
            </summary>
        </member>
        <member name="P:Common.Contract.SmartTable.Shape">
            <summary>
            Drawing shape in the table Map.
            </summary>
        </member>
        <member name="P:Common.Contract.SmartTable.NbDiners">
            <summary>
            This field is used by the tablets BEFORE ordering.
            Once the OrderHeader is created and linked to the SmartTable, then the NbDiners of the OrderHeader is used.
            So this field here is used to avoid having all the tablet users to enter the NbDiners information at startup time.
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.DeviceID">
            <summary>
            SmartTableID
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.TabletID">
            <summary>
            TabletID set in case user is using a tablet to order (remains until the meal of the table is finished).
            Differs from Tablet.LinkedSmartTableID which refers to the smarttable this tablet is linked to (AT THIS VERY MOMENT!)
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.HasOrdered">
            <summary>
            Null means false.
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.IsOrdering">
            <summary>
            Flag telling if the linked person is currently ordering something (versus only play or look at media and web pages).
            Null means false.
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.HasItemInCart">
            <summary>
            Flag telling if telling if the linked person have added something in there cart or not
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.HasAcquiredOrderLock">
            <summary>
            Tablet have a non esclusive lock on the Order Header 
            </summary>
        </member>
        <member name="P:Common.Contract.TableUser.WorkspaceLocation">
            <summary>
            Physical Location of person when connected to a SmartTable or Tablet.
            So far this is NOT used for tablets.
            Defaults to Bottom Left.
            </summary>
        </member>
        <member name="T:Common.Contract.Translation">
            <summary>
            Stores localized text (I18N).
            Only one of the optional ID is set.
            Shop ID must be set.
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.ID">
            <summary>
            Identification number
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Language">
            <summary>
            2-char ISO language name (like en, fr, es, it, de).
            Can also contain Country information (like en-US, fr-FR).
            The system uses the fallback mechanism to find the most appropriate localized text depending on the requested language (also known as locale).
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Text">
            <summary>
            The localized text
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Attribute_ID">
            <summary>
            Optional attribute ID
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.AttributeValue_ID">
            <summary>
            Optional attribute value id
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.AttributeValueDescription_ID">
            <summary>
            Optional attribute value id for its description.
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.ProductGroup_ID">
            <summary>
            Product group Id
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.ProductGroupType_ID">
            <summary>
            Optional product group type id
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.GuidedActivity_ID">
            <summary>
            Optional Guided activity id (for its name)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.GuidedActivityProductGroup_ID">
            <summary>
            Optional Guided Activity product group id (for its name)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Allergen_ID">
            <summary>
            Optional allergen id (for its name)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Ingredient_ID">
            <summary>
            Optional Ingredient id (for its name)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.OrderState_ID">
            <summary>
            Optional OrderState ID (name)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.ProductTitle_ID">
            <summary>
            Opotional Product ID (or its name / title)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.ProductSubtitle_ID">
            <summary>
            Opotional Product ID (or its description / subtitle)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Feature_ID">
            <summary>
            Optional Feature id
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.PaymentType_ID">
            <summary>
            Optional Payment type id
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.WorkArea_ID">
            <summary>
            Optional WorkArea ID.
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.CodeUnit">
            <summary>
            Optional Code Unit
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.ShopID">
            <summary>
            Shop ID must be set.
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.Key">
            <summary>
            When localized texts need to be configurable, the Key is used to identify them.
            This is used in conjunction with the ShopID parameter.
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.TvAdScreenTitle_ID">
            <summary>
            Optional TV advertisement screen id (for its name)
            </summary>
        </member>
        <member name="P:Common.Contract.Translation.TvAdScreenSubtitle_ID">
            <summary>
            Optional TV advertisement screen id (for its subtitle)
            </summary>
        </member>
        <member name="T:Common.Contract.PrivacyArea">
            <summary>
            Defines main areas for person privacy.
            </summary>
        </member>
        <member name="F:Common.Contract.PrivacyArea.SMS">
            <summary>
            SMS media
            </summary>
        </member>
        <member name="F:Common.Contract.PrivacyArea.Email">
            <summary>
            Email media
            </summary>
        </member>
        <member name="F:Common.Contract.PrivacyArea.DataCollection">
            <summary>
            Machine learning / Data collection for a person
            </summary>
        </member>
        <member name="T:Common.Contract.PrivacyActivity">
            <summary>
            The activity is a sub area of a privacy
            </summary>
        </member>
        <member name="F:Common.Contract.PrivacyActivity.Authentication">
            <summary>
            Message sent for authentication purpose.
            </summary>
        </member>
        <member name="F:Common.Contract.PrivacyActivity.Coupon">
            <summary>
            Message sent regarding new coupon.
            </summary>
        </member>
        <member name="F:Common.Contract.PrivacyActivity.Advertisement">
            <summary>
            Message sent for ad purpose (new event, etc.).
            </summary>
        </member>
        <member name="T:Common.Contract.PrivacyPreference">
            <summary>
            Collection of preferences for a person regarding his/her privacy.
            </summary>
        </member>
        <member name="P:Common.Contract.PrivacyPreference.ID">
            <summary>
            Primary key.
            </summary>
        </member>
        <member name="P:Common.Contract.PrivacyPreference.PersonID">
            <summary>
            Link to person
            </summary>
        </member>
        <member name="P:Common.Contract.PrivacyPreference.PrivacyArea">
            <summary>
            Main area for person privacy.
            </summary>
        </member>
        <member name="P:Common.Contract.PrivacyPreference.PrivacyActivity">
            <summary>
            Sub-area for person privacy.
            </summary>
        </member>
        <member name="P:Common.Contract.PrivacyPreference.Person">
            <summary>
            Linked Person.
            </summary>
        </member>
        <member name="P:Common.Contract.User.ShopID">
            <summary>
            Preferred Shop ID
            </summary>
        </member>
        <member name="P:Common.Contract.User.Shop">
            <summary>
            Preferred Shop
            </summary>    
        </member>
        <member name="P:Common.Contract.User.Balance">
            <summary>
            Avoir du client (argent payé à l'avance)
            </summary>
        </member>
        <member name="P:Common.Contract.User.SponsorID">
            <summary>
            Parrain
            </summary>
        </member>
        <member name="P:Common.Contract.User.Sponsor">
            <summary>
            Parrain
            </summary>
        </member>
        <member name="P:Common.Contract.User.SponsoredUsers">
            <summary>
            Filleuls
            </summary>
        </member>
        <member name="T:Common.Contract.ValidityDate">
            <summary>
            Week days
            </summary>
        </member>
        <member name="T:Common.Contract.WorkArea">
            <summary>
            Kind of production unit like bar, sauce, dessert, cold, hot, etc.
            </summary>
        </member>
        <member name="P:Common.Contract.WorkArea.Printer">
            <summary>
            This is the default printer for this WorkArea
            It might change if A WorkAreaLocation (like "Terrasse Bar") is specified for this "generic" WorkArea (like Bar)
            </summary>
        </member>
        <member name="T:Common.Contract.WorkAreaLocation">
            <summary>
            Defines a WorkAreaLocation (like "Terrasse Bar") for a generic WorkArea (like "Bar").
            </summary>
        </member>
        <member name="P:Common.Contract.WorkAreaLocation.Printer">
            <summary>
            This is the printer for this WorkArea Location
            </summary>
        </member>
        <member name="T:Common.Contract.Tablet">
            <summary>
            A tablet can be connected to any SmartTable.
            </summary>
        </member>
        <member name="P:Common.Contract.Tablet.LinkedSmartTableID">
            <summary>
            Id of the smarttable this tablet is linked to (AT THIS VERY MOMENT!)
            Differs from TableUser.TabletID which remains until the meal of the table is finished.
            </summary>
        </member>
        <member name="P:Common.Contract.Tablet.LinkedSmartTable">
            <summary>
            Smarttable linked by this tablet.
            </summary>
        </member>
        <member name="P:Common.Contract.Tablet.LinkedWorkspace">
            <summary>
            Space on the table that is represented by this tablet. (out of 4. Usually, it is the bottom left one).
            </summary>
        </member>
        <member name="F:Common.I18N.textSemaphore">
            <summary>
            Semaphore used to prevent multithreaded accesses to the Text class.
            This is to prevent from changing the CultureInfo (linked to prefered language) 
            from the effective retrieval of the localized text.
            </summary>
        </member>
        <member name="M:Common.I18N.ReplaceParameters(System.String,System.String[])">
            <summary>
            Replace the parameters from the rawText with the one given as argument,
            keeping their order.
            Example:
             - rawText = "{1} {0}, how are you?"
             - parameters = string[]{"Girl", "Hello"}
             Would result in "Hello Girl, how are you?"
            </summary>
            <param name="rawText">a string that may contain parameter placeholders as {nb} where nb is a positive integer number starting with 0</param>
            <param name="parameters">a string array of parameter values</param>
            <returns>the string with the parameters replaced by their corresponding values</returns>
        </member>
        <member name="F:Common.Log.LogHelperImpl.logMessagesToProcess">
            <summary>
            Holds the list of log messages to write to output.
            These are processed by a dedicated thead to improve performances.
            string = Thread.ID + Task.ID
            LogLevel (Error to Debug)
            Object: .ToString used for message
            Exception (optional exception). ToString() used.
            </summary>
        </member>
        <member name="F:Common.Log.LogHelperImpl.msgToLogSemaphore">
            <summary>
            Semaphore object used to prevent multi-threaded accesses to the logMessagesToProcess variable.
            </summary>
        </member>
        <member name="F:Common.Log.LogHelperImpl.taskCreationSemaphore">
            <summary>
            Semaphore object used to prevent multi-threaded accesses when creating the log writer task.
            </summary>
        </member>
        <member name="F:Common.Log.LogHelperImpl.loggerTask">
            <summary>
            This task takes care of reading the log messages stored in logMessagesToProcess and writes them to the output store.
            </summary>
        </member>
        <member name="M:Common.Log.LogHelperImpl.Init(System.String)">
            <summary>
            namedLogger is the name as defined in log4net.config file
            </summary>
            <param name="namedLogger"></param>
        </member>
        <member name="M:Common.Log.LogHelperImpl.AddMessageToLog(Common.Log.LogLevel,System.Object,System.Exception)">
            <summary>
            Adds a new message to queue of messages to qrite to the store.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Log.LogHelperImpl.DoWriteLog">
            <summary>
            Executed by parallel thread to write enqueued logs to output.
            </summary>
        </member>
        <member name="F:Common.Notif.AskForHelpEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.AskForHelpEvent.Message">
            <summary>
            In case Help event type is of type "FreeText", the message associated this Help event
            </summary>
        </member>
        <member name="F:Common.Notif.ClearHelpEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.ClearHelpEvent.Message">
            <summary>
            In case Help event type is of type "FreeText", the message associated this Help event
            </summary>
        </member>
        <member name="F:Common.Notif.ChunkEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.OrderHeaderChangedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.OrderHeaderChangedEvent.LockChanged">
            <summary>
            Changed ONLY when the OrderHeader Lock is changed:
            Null means Lock NOT changed
            False means Lock NOT changed
            True  means OrderHeader lock has just been changed.
            </summary>
        </member>
        <member name="P:Common.Notif.OrderHeaderChangedEvent.LockingDeviceId">
            <summary>
            In case LockChanged == True, LockingDeviceId contains the device Id holding the lock.
            </summary>
        </member>
        <member name="T:Common.Notif.UserChangeType">
            <summary>
            The type of change which have been applied to the user
            </summary>
        </member>
        <member name="F:Common.Notif.UserChangeType.Added">
            <summary>
            User got added
            </summary>
        </member>
        <member name="F:Common.Notif.UserChangeType.Deleted">
            <summary>
            User got removed
            </summary>
        </member>
        <member name="F:Common.Notif.UserChangeType.ProfileUpdate">
            <summary>
            Update of user information (including user name/address/loyalty card...)
            </summary>
        </member>
        <member name="F:Common.Notif.UserChangeType.Balance">
            <summary>
            User Balance got updated
            </summary>
        </member>
        <member name="F:Common.Notif.PersonChangedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.PersonChangedEvent.UserId">
            <summary>
            User identification number
            </summary>
        </member>
        <member name="P:Common.Notif.PersonChangedEvent.Deleted">
            <summary>
            Set to true if user has been deleted (or anonymize).
            </summary>
        </member>
        <member name="P:Common.Notif.PersonChangedEvent.OnlyBalanceUpdated">
            <summary>
            
            Set to true if only user balance has been updated.
            </summary>
        </member>
        <member name="P:Common.Notif.PersonChangedEvent.ChangeType">
            <summary>
             The type of change which have been applied to the user
            </summary>
        </member>
        <member name="P:Common.Notif.PersonChangedEvent.Balance">
            <summary>
            User balance (avoir) 
            </summary>
        </member>
        <member name="F:Common.Notif.QuizShopDisplayAnswerEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.QuizShopDisplayAnswerEvent.DisplayAnswer">
            <summary>
            Used by both the TVs and the SmartTables.
            </summary>
        </member>
        <member name="P:Common.Notif.QuizShopDisplayAnswerEvent.DisplayScore">
            <summary>
            Used by TV only to show scores.
            </summary>
        </member>
        <member name="P:Common.Notif.QuizShopDisplayAnswerEvent.CurrentQuestionIndex">
            <summary>
            Index of current question
            </summary>
        </member>
        <member name="P:Common.Notif.QuizShopDisplayAnswerEvent.NbQuestions">
            <summary>
            Total number of questions for curretn quiz.
            </summary>
        </member>
        <member name="P:Common.Notif.QuizShopDisplayAnswerEvent.TeamInfos">
            <summary>
            Information required by the TV:
            Table Name (not needed by TV but needed to uniquely identify teams (in conjunction with team name))
            Team Name
            Avatar Picture
            Two scores
            </summary>
        </member>
        <member name="F:Common.Notif.QuizShopFinalGameEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.QuizShopFinalGameEvent.Cancelled">
            <summary>
            Set to true when game has been prematurately stopped.
            </summary>
        </member>
        <member name="F:Common.Notif.QuizShopQuestionEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.QuizShopTableParticipateEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="T:Common.Notif.ShowNotificationEvent">
            <summary>
            Event to show a notification message on the target device
            </summary>
        </member>
        <member name="F:Common.Notif.ShowNotificationEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.ShowNotificationEvent.PersonId">
            <summary>
            Used for smart table to specify which workspace the view should be shown on (if 0 all workspace)
            </summary>
        </member>
        <member name="F:Common.Notif.ShowViewEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.ShowViewEvent.FeatureId">
            <summary>
            Id of the feature from which information about the view to show should be extracted
            </summary>
        </member>
        <member name="P:Common.Notif.ShowViewEvent.ParameterName">
            <summary>
            Name of one of the parameter of the view that should be overriden 
            </summary>
        </member>
        <member name="P:Common.Notif.ShowViewEvent.ParameterValue">
            <summary>
            Value of the parameter specified by ParameterName of the view that should be overriden 
            </summary>
        </member>
        <member name="P:Common.Notif.ShowViewEvent.PersonId">
            <summary>
            Used for smart table to specify which workspace the view should be shown on (if 0 all workspace)
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.receivedMessages">
            <summary>
            Holds the received messages (which are still incomplete).
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.receivedMessagesSemaphore">
            <summary>
            Semaphore object used to prevent multi-threaded accesses to the receivedMessages variable.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.HUB_METHOD_FOR_ACK">
            <summary>
            Method name on the Hub side to acknowledge reception of a message chunk.
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRReceiver.NewMessageReceivedDelegate">
            <summary>
            Defines the method signature that is called whenever a full message is received.
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.NewMessageReceived">
            <summary>
            Delegate used to send a newly-arrived message to the main client application.
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRReceiver.NewMessageForHubReceivedDelegate">
            <summary>
            Defines the method signature that is called whenever a full message is received.
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.NewMessageForHubReceived">
            <summary>
            Delegate used to send a newly-arrived message to the main client application.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.IsConnectionReady">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRReceiver.SendMessageToHubDelegate">
            <summary>
            Defines method signature used to send a message.
            </summary>
            <param name="connectionName"></param>
            <param name="chunkContent"></param>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.SendMessageToHub">
            <summary>
            Pointer to function that is used to effectively send the message.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.Logger">
            <summary>
            Delegate used to send log string to caller.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRReceiver.alreadyReceivedMessageGuids">
            <summary>
            Holds the list of message GUIDS that have recently been received.
            This is to avoid this scenario where a sender does NOT receives the acknowledgments and sends
            the same message again and again. Receiver may deliver the same message several times to the 
            callee application.
            </summary>
        </member>
        <member name="M:Common.Notif.SignalRReceiver.InitForFrontend(Common.Notif.SignalRReceiver.SendMessageToHubDelegate,Common.Notif.SignalRSender.LoggerDelegate,Common.Notif.SignalRReceiver.NewMessageReceivedDelegate,Common.Notif.SignalRSender.IsConnectionReadyDelegate)">
            <summary>
            Used to provide necessary delegates toward calling application.
            </summary>
            <param name="sendMessageToHubMethod"></param>
            <param name="loggerMethod"></param>
            <param name="newMessageReceived"></param>
        </member>
        <member name="M:Common.Notif.SignalRReceiver.InitForHub(Common.Notif.SignalRReceiver.SendMessageToHubDelegate,Common.Notif.SignalRSender.LoggerDelegate,Common.Notif.SignalRReceiver.NewMessageForHubReceivedDelegate)">
            <summary>
            Used to provide necessary delegates toward calling application.
            </summary>
            <param name="sendMessageToHubMethod"></param>
            <param name="loggerMethod"></param>
            <param name="newMessageReceived"></param>
        </member>
        <member name="M:Common.Notif.SignalRReceiver.OnChunkReceived(Common.Notif.ChunkEvent)">
            <summary>
            Call this method whenever the received message is a ChunkEvent instance.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="F:Common.Notif.SignalRSender.messages">
            <summary>
            Holds the list of messages to send.
            These are processed by a dedicated thead to improve performances.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.messagesSemaphore">
            <summary>
            Semaphore object used to prevent multi-threaded accesses to the messages variable.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.taskCreationSemaphore">
            <summary>
            Semaphore object used to prevent multi-threaded accesses when creating the sender task.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.senderTask">
            <summary>
            This task takes care of reading the messages stored in messages and writes them to the output stream.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.MAX_CHUNK_SIZE">
            <summary>
            Maximum size in bytes of each individual chunk that the message will be split into.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.MAX_NB_CHARS_IN_CHUNK">
            <summary>
            A character in .Net is represented by 16 bits, meaning 2 bytes. So we divise by 2 here
            to get the maximum number of characters in a chunk.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.SEND_RETRY_DELAY">
            <summary>
            Time to wait without any response back from the counterpart before sending the message chunk again.
            In milliseconds.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.SEND_RETRY_MAX_DELAY">
            <summary>
            MAX send attempt duration time (in milliseconds).
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.MAX_HUB_WAIT_FOR_DISCONNECTED_CLIENT">
            <summary>
            Time for the Hub to wait for a disconnected client to connect again before removing messages.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.HUB_METHOD_FOR_CHUNK">
            <summary>
            Method name on the Hub side to send a new message chunk.
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRSender.SendMessageDelegate">
            <summary>
            Defines method signature used to send a message.
            </summary>
            <param name="connectionName"></param>
            <param name="chunkContent"></param>
        </member>
        <member name="F:Common.Notif.SignalRSender.SendMessage">
            <summary>
            Pointer to function that is used to effectively send the message.
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRSender.IsConnectionReadyDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.IsConnectionReady">
            <summary>
            
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRSender.SendMessageToHubDelegate">
            <summary>
            Defines method signature used to send a message.
            </summary>
            <param name="connectionName"></param>
            <param name="chunkContent"></param>
        </member>
        <member name="F:Common.Notif.SignalRSender.SendMessageToHub">
            <summary>
            Pointer to function that is used to effectively send the message.
            </summary>
        </member>
        <member name="T:Common.Notif.SignalRSender.LoggerDelegate">
            <summary>
            Defines the method signature for the logging facility.
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
        </member>
        <member name="F:Common.Notif.SignalRSender.Logger">
            <summary>
            Delegate used to send log string to caller.
            </summary>
        </member>
        <member name="F:Common.Notif.SignalRSender.TIMER_INTERVAL">
            <summary>
            Number of milliseconds between two send iterations (over all existing messages).
            </summary>
        </member>
        <member name="P:Common.Notif.SignalRSender.ShallLog">
            <summary>
            Tells if verbose log should be performed (for SignalRSender and SignalRReceiver classes).
            </summary>
        </member>
        <member name="M:Common.Notif.SignalRSender.InitForHub(Common.Notif.SignalRSender.SendMessageDelegate,Common.Notif.SignalRSender.LoggerDelegate,System.Collections.Generic.List{Common.Notif.ConnectionStatus})">
            <summary>
            Used to initialitize the delegate instances.
            </summary>
            <param name="sendMessageMethod"></param>
            <param name="loggerMethod"></param>
        </member>
        <member name="M:Common.Notif.SignalRSender.InitForClients(Common.Notif.SignalRSender.SendMessageToHubDelegate,Common.Notif.SignalRSender.LoggerDelegate,Common.Notif.SignalRSender.IsConnectionReadyDelegate)">
            <summary>
            Used to initialize the delegate instances.
            </summary>
            <param name="sendMessageMethod"></param>
            <param name="loggerMethod"></param>
        </member>
        <member name="M:Common.Notif.SignalRSender.AddMessage(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new message to the list.
            </summary>
            <param name="o"></param>
            <param name="e"></param>
        </member>
        <member name="M:Common.Notif.SignalRSender.DoSendMessages">
            <summary>
            Executed by parallel thread to send messages to output.
            </summary>
        </member>
        <member name="M:Common.Notif.SignalRSender.UpdateConnectionIdUponReconnection(System.String,System.String)">
            <summary>
            This method is used whenever a client reconnects.
            In fact, the client creates a new connection with a new ID.
            So if we have messages pending for this recipient, make sure to update their client connection name with the new one 
            so that these messages have a chance to reach their destination...
            
            This method is used only by the Hub itself.
            </summary>
            <param name="oldNotifConnectionId"></param>
            <param name="newNotifConnectionId"></param>
        </member>
        <member name="F:Common.Notif.QuizShopParticipateEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.TableStatusChangedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.AutoUpdate">
            <summary>
            For the tablet to to auto update to the latest version of the application
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.ClearCache">
            <summary>
            Clear all values from the Tablet/Table cache and requerry them from the server
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.UpdateCache">
            <summary>
            Force an imediate querry to update the cache value if they have changed in case people are not using the device (on table menu) 
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.ForceUpdate">
            <summary>
            Force tablet to download and install or reinstall the latest version of the application
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.UpdateImages">
            <summary>
            Force a reset of the image cache
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.ForceLogout">
            <summary>
            Force device to logout
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.CollectUpdaterLogs">
            <summary>
            Retrieve logs from tablet updater
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringAction.CollectPlatformLogs">
            <summary>
            Collect logs from the platform (like for exemple from logcat for exemple)
            </summary>
        </member>
        <member name="F:Common.Notif.MonitoringEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.GameMessageEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.GameMessageEvent.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Notif.AssociationToUserEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.ForcedLogoutEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.LockedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.INotifEvent.DBModelAsString">
            <summary>
            CAUTION: This property is used only during communication between the WCF and the Notif service.
            After that, the Notification service casts the DBModel object to a WCF Service-like type.
            This is this last type that is sent to the clients.
            </summary>
        </member>
        <member name="F:Common.Notif.LogRequestedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.NotifEvent.DBModelAsString">
            <summary>
            CAUTION: This property is used only during communication between the WCF and the Notif service.
            After that, the Notification service casts the DBModel object to a WCF Service-like type.
            This is this last type that is sent to the clients.
            
            WCF -------> Notif Hub  ---------> Frontend clients (SmartAble / Tablet / Cash Register / Mobile / Kiosk)
            </summary>
        </member>
        <member name="P:Common.Notif.NotifEvent.ExternalID">
            <summary>
            External id of the "main" object related to this notification (user external id for user change notification for exemple)
            </summary>
        </member>
        <member name="F:Common.Notif.OrderStatusChangedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.StockChangedEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.PaymentEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.PaymentEvent.DeviceId">
            <summary>
            Used only by Cash Registers 
            </summary>
        </member>
        <member name="P:Common.Notif.PaymentEvent.OrderHeaderId">
            <summary>
            Used only by Cash Registers 
            
            If not null => order payment
            else => payment for an user to credit is account (in which case @UserId should not be null)
            </summary>
        </member>
        <member name="P:Common.Notif.PaymentEvent.UserId">
            <summary>
            Used only by Cash Registers 
            @see OrderHeaderId
            </summary>
        </member>
        <member name="P:Common.Notif.PaymentEvent.PaymentReceiptId">
            <summary>
            The id of the receipt for the payment which has been made
            Only set when PaymentStatus is Success
            </summary>
        </member>
        <member name="P:Common.Notif.PaymentEvent.OrderHeaderStateId">
            <summary>
            Holds the new StateID value.
            This is useful to know if an order is now closed.
            </summary>
        </member>
        <member name="F:Common.Notif.SuggestReOrderEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.Notif.TableMessageEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="P:Common.Notif.TableMessageEvent.Text">
            <summary>
            
            </summary>
        </member>
        <member name="F:Common.Notif.TvGameStartEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="T:Common.Notif.UserEvent">
            <summary>
            Will send the Coupon 
            </summary>
        </member>
        <member name="F:Common.Notif.UserEvent.EVENT_TYPE">
            <summary>
            Constant defining the event type for this class.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.StartLogo">
            <summary>
            Logo for start table and if ReceiptLogo not exist, logo for receipt
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapRectTable2">
            <summary>
            Non clonable tile: means for devices (you cannot duplicate a table).
            Rectangular table for 2 people.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapRectTable4">
            <summary>
            Non clonable tile: means for devices (you cannot duplicate a table).
            Rectangular table for 4 people.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapSquareTable2">
            <summary>
            Non clonable tile: means for devices (you cannot duplicate a table).
            Square table for 2 people.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapSquareTable4">
            <summary>
            Non clonable tile: means for devices (you cannot duplicate a table).
            Square table for 4 people.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapRoundTable2">
            <summary>
            Non clonable tile: means for devices (you cannot duplicate a table).
            Round table for 2 people.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapRoundTable4">
            <summary>
            Non clonable tile: means for devices (you cannot duplicate a table).
            Round table for 4 people.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapBrushTile">
            <summary>
            Used as brush for other tiles (pattern to fill in a surface: marble, wood, etc.)
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.MapBackgroundTile">
            <summary>
            Can be used as ground
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ImgAndroidQrCode">
            <summary>
            Link toward the Android QrCode Image
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.AndroidAppUrl">
            <summary>
            Link toward the Android (Google) mobile application
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ImgIosQrCode">
            <summary>
            Link toward the Apple QrCode Image
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.IosAppUrl">
            <summary>
            Link toward the IOS (Apple) mobile application
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ReceiptLogo">
            <summary>
            Logo for receipt
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ImgWindowCorner">
            <summary>
            Image to display at the top left corner of the windows.
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ActionValidate">
            <summary>
            Validate Action Icon
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ImgValidated">
            <summary>
            Validated image shown when a choice is correct (quiz).
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.DefaultUserAvatar">
            <summary>
            The default image for the user avatar in case they don't have one defined
            </summary>
        </member>
        <member name="F:Common.LookAndFeelItem.ImgWaitress">
            <summary>
            Waitress appearing on top left of the tablet474
            </summary>
        </member>
        <member name="T:Common.SrvOrderResource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.BeingPrepared">
            <summary>
              Looks up a localized string similar to Being Prepared.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Cancelled">
            <summary>
              Looks up a localized string similar to Cancelled.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.CheckOut">
            <summary>
              Looks up a localized string similar to Check Out.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Closed">
            <summary>
              Looks up a localized string similar to Closed.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Consolidated">
            <summary>
              Looks up a localized string similar to Consolidated.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Declined">
            <summary>
              Looks up a localized string similar to Declined.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.New">
            <summary>
              Looks up a localized string similar to New.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Ordered">
            <summary>
              Looks up a localized string similar to Ordered.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Payed">
            <summary>
              Looks up a localized string similar to Payed.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.PreOrdered">
            <summary>
              Looks up a localized string similar to PreOrdered.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.PreOrderPaymentPending">
            <summary>
              Looks up a localized string similar to PreOrder Payment Pending.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.ReadyToServe">
            <summary>
              Looks up a localized string similar to Ready To Serve.
            </summary>
        </member>
        <member name="P:Common.SrvOrderResource.Served">
            <summary>
              Looks up a localized string similar to Served.
            </summary>
        </member>
        <member name="M:Common.SrvOrderStateHelper.GetOrderStateString(Common.Contract.OrderStateValue,System.String)">
            <summary>
            Translates (localizes) the given value into current locale (called culture in Dot net) 
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "F:Common.Utils.LanguageHelper.ENGLISH_LANGUAGE" -->
        <member name="T:Common.Utils.MiniDumpGenerator">
            <summary>
            From http://brakertech.com/howto-c-generate-dump-file-on-crash/
            </summary>
        </member>
        <member name="M:Common.Utils.MiniDumpGenerator.CreateMiniDump(System.String,System.Boolean)">
            <summary>
            Create a dump
            <param name="dumpFilePath">the path were the dump file will be created</param>
            <param name="withFullMemory">if true include full memory in the dump, warning : can take a lot of space. Otherwise will only include stack trace of all the threads</param>
            </summary>
        </member>
    </members>
</doc>
